/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-06-10 12:43:44.253429
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41;
x0=IKsin(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKsin(j[4]);
x8=IKcos(j[0]);
x9=IKcos(j[4]);
x10=((0.018)*x9);
x11=((0.003)*x7);
x12=((0.001)*x2);
x13=((0.001)*x4);
x14=((0.018)*x5);
x15=((1.0)*x2);
x16=((0.168)*x2);
x17=((1.0)*x0);
x18=((0.168)*x4);
x19=((0.089)*x2);
x20=((0.018)*x6);
x21=((1.0)*x4);
x22=(x3*x8);
x23=(x1*x2);
x24=(x0*x3);
x25=(x3*x4);
x26=(x0*x1);
x27=((-0.003)*x6);
x28=(x1*x4);
x29=((-0.003)*x5);
x30=(x1*x15);
x31=((0.089)*x28);
x32=(x28*x8);
x33=((((-1.0)*x30))+x25);
x34=((((-1.0)*x1*x21))+(((-1.0)*x15*x3)));
x35=(((x2*x22))+x32);
x36=((((-1.0)*x17*x25))+((x15*x26)));
x37=(((x21*x22))+(((-1.0)*x30*x8)));
x38=((((-1.0)*x15*x24))+(((-1.0)*x17*x28)));
x39=(((x17*x28))+((x15*x24)));
x40=(x36*x5);
x41=(x38*x6);
IkReal x42=((1.0)*x24);
eetrans[0]=((((0.104)*x24))+((x7*(((((-0.018)*x41))+(((-0.018)*x40))))))+((x19*x24))+((x6*(((((-1.0)*x18*x42))+((x16*x26))))))+((x5*((((x12*x26))+(((-1.0)*x13*x42))))))+(((-0.004)*x8))+(((0.089)*x26*x4))+(((-1.0)*x10*x8))+((x11*x8))+((x5*((((x18*x26))+((x16*x24))))))+(((0.01)*x0))+((x6*(((((-1.0)*x13*x26))+(((-1.0)*x12*x42))))))+((x9*(((((-0.003)*x41))+(((-0.003)*x40)))))));
IkReal x43=(x1*x8);
IkReal x44=((1.0)*x16);
eetrans[1]=(((x9*((((x27*x35))+((x29*x37))))))+((x5*(((((-1.0)*x18*x43))+(((-1.0)*x22*x44))))))+((x0*x11))+((x6*((((x18*x22))+(((-1.0)*x43*x44))))))+(((-0.01)*x8))+(((-0.104)*x22))+(((-1.0)*x0*x10))+((x7*(((((-1.0)*x20*x35))+(((-1.0)*x14*x37))))))+(((-1.0)*x19*x22))+(((-0.004)*x0))+((x6*((((x13*x43))+((x12*x22))))))+(((-1.0)*x31*x8))+((x5*(((((-1.0)*x12*x43))+((x13*x22)))))));
IkReal x45=((1.0)*x3);
IkReal x46=((1.0)*x1);
eetrans[2]=((0.087)+((x6*(((((-1.0)*x18*x46))+(((-1.0)*x16*x45))))))+((x1*x19))+(((0.104)*x1))+((x7*(((((-1.0)*x20*x33))+(((-1.0)*x14*x34))))))+((x9*((((x27*x33))+((x29*x34))))))+((x5*(((((-1.0)*x12*x45))+(((-1.0)*x13*x46))))))+((x6*(((((-1.0)*x12*x46))+((x13*x3))))))+((x5*((((x1*x16))+(((-1.0)*x18*x45))))))+(((-0.089)*x25)));
eerot[0]=(((x39*x5))+((x36*x6)));
eerot[1]=(((x37*x6))+((x5*(((((-1.0)*x15*x22))+(((-1.0)*x1*x21*x8)))))));
eerot[2]=(((x34*x6))+((x5*(((((-1.0)*x21*x3))+x30)))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.087)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x48 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x48.valid){
continue;
}
IkReal x47=x48.value;
j0array[0]=((-1.0)*x47);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x47)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[8+1], zeror[8];
int numroots;
IkReal x49=px*px;
IkReal x50=pz*pz;
IkReal x51=py*py;
IkReal x52=((193.0)*r02);
IkReal x53=((15.0)*r02);
IkReal x54=((0.125484482)*pz);
IkReal x55=((1.966028121735)*r02);
IkReal x56=((21.081392976)*pz);
IkReal x57=(py*r01);
IkReal x58=((24.218505026)*pz);
IkReal x59=(r00*sj0);
IkReal x60=(cj0*r01);
IkReal x61=(px*sj0);
IkReal x62=((2.50968964)*r02);
IkReal x63=(py*r00);
IkReal x64=(r01*sj0);
IkReal x65=((250.968964)*cj0);
IkReal x66=(py*r02);
IkReal x67=(px*r00);
IkReal x68=((0.501937928)*pz);
IkReal x69=(cj0*py);
IkReal x70=(pz*r02);
IkReal x71=((250.968964)*pz);
IkReal x72=(px*r01);
IkReal x73=((125.484482)*pz);
IkReal x74=((1.25484482)*pz);
IkReal x75=((1.003875856)*pz);
IkReal x76=(cj0*r00);
IkReal x77=((2.50968964)*pz);
IkReal x78=((10.0)*x59);
IkReal x79=((1000.0)*x70);
IkReal x80=((29.0)*x76);
IkReal x81=((10.0)*x60);
IkReal x82=((1000.0)*x57);
IkReal x83=((29.0)*x64);
IkReal x84=((1000.0)*x67);
IkReal x85=((178.0)*x60);
IkReal x86=((178.0)*x59);
IkReal x87=((21.081392976)*x61);
IkReal x88=((0.00501937928)*x76);
IkReal x89=((1.25484482)*x70);
IkReal x90=((0.540147952769)*x59);
IkReal x91=((0.501937928)*x63);
IkReal x92=((1.25484482)*x57);
IkReal x93=((0.00501937928)*x64);
IkReal x94=((1.25484482)*x67);
IkReal x95=((21.081392976)*x69);
IkReal x96=((0.540147952769)*x60);
IkReal x97=((0.501937928)*x72);
IkReal x98=((13.050386128)*x67);
IkReal x99=((0.125484482)*x61);
IkReal x100=((13.050386128)*x70);
IkReal x101=((13.050386128)*x57);
IkReal x102=((0.052201544512)*x76);
IkReal x103=((0.052201544512)*x64);
IkReal x104=((0.125484482)*x69);
IkReal x105=((125.484482)*x50);
IkReal x106=((125.484482)*x49);
IkReal x107=((62.742241)*x51);
IkReal x108=((62.742241)*x50);
IkReal x109=(cj0*px*r02);
IkReal x110=((125.484482)*x51);
IkReal x111=((62.742241)*x49);
IkReal x112=((168.0)+x78);
IkReal x113=((24.218505026)*cj0*x66);
IkReal x114=(x58*x59);
IkReal x115=((24.218505026)*r02*x61);
IkReal x116=(x58*x60);
IkReal x117=(x68*x76);
IkReal x118=((1.25484482)*r02*x61);
IkReal x119=(r02*x108);
IkReal x120=(x67*x73);
IkReal x121=(x57*x73);
IkReal x122=(x60*x74);
IkReal x123=(x64*x68);
IkReal x124=(x59*x74);
IkReal x125=(r02*x107);
IkReal x126=((1.25484482)*cj0*x66);
IkReal x127=((0.501937928)*x109);
IkReal x128=((0.501937928)*sj0*x66);
IkReal x129=(r02*x111);
IkReal x130=(x86+(((-1.0)*x85)));
IkReal x131=((((-386.0)*x60))+(((386.0)*x59)));
IkReal x132=((((30.0)*x59))+(((-30.0)*x60)));
IkReal x133=(x108*x59);
IkReal x134=(x107*x60);
IkReal x135=(cj0*x66*x73);
IkReal x136=(x107*x59);
IkReal x137=((125.484482)*cj0*px*x63);
IkReal x138=(x108*x60);
IkReal x139=((125.484482)*x57*x61);
IkReal x140=((125.484482)*x61*x70);
IkReal x141=(x111*x59);
IkReal x142=(x111*x60);
IkReal x143=(x85+(((-1.0)*x86)));
IkReal x144=(x113+x114);
IkReal x145=(x116+x115);
IkReal x146=(x100+x101+x102+x103+x98);
IkReal x147=(x79+x82+x83+x80+x81+x84);
IkReal x148=((((-1.0)*x147))+x112+x52);
IkReal x149=((((-1.0)*x147))+x112+x53);
IkReal x150=((((-1.0)*x147))+x112+(((-1.0)*x52)));
IkReal x151=((((-1.0)*x147))+x112+(((-1.0)*x53)));
IkReal x152=(x126+x127+x124+x125+x128+x129+x104+x56);
IkReal x153=(x122+x123+x120+x121+x117+x119+x118+x55+x99);
IkReal x154=(x140+x141+x142+x139+x138+x95+x97+x96);
IkReal x155=(x135+x134+x137+x136+x133+x54+x88+x89+x87+x91+x90+x93+x92+x94);
IkReal x156=((0.00250968964)+((x59*x77))+((r02*x106))+(((-1.0)*x61*x62))+((r02*x110))+(((1.003875856)*sj0*x66))+(((-1.0)*x60*x77))+(((1.105392801938)*r02))+((x62*x69))+(((-0.250968964)*x61))+(((42.162785952)*pz))+(((-0.042162785952)*x60))+(((-1.0)*r02*x105))+(((1.003875856)*x109))+(((0.250968964)*x69))+(((-1.0)*x67*x71))+(((-1.0)*x57*x71))+(((-1.0)*x64*x75))+(((0.042162785952)*x59))+(((-1.0)*x75*x76)));
IkReal x157=((-2.191210024684)+(((-0.109422468304)*x59))+(((-1.0)*x153))+x152+x146+(((0.109422468304)*x60)));
IkReal x158=((-2.193719714324)+(((-1.0)*x152))+(((0.151585254256)*x60))+(((-0.151585254256)*x59))+x153+x146);
IkReal x159=((-0.42162785952)+(((-250.968964)*x61*x70))+(((1.003875856)*x63))+(((0.01003875856)*x76))+(((2.50968964)*x57))+((x105*x59))+(((-1.0)*x105*x60))+(((2.50968964)*x67))+((pz*x65*x66))+(((-1.003875856)*x72))+(((-3.95715313987)*x59))+(((-0.042162785952)*r02))+((px*x63*x65))+(((-1.0)*x106*x60))+(((-250.968964)*x57*x61))+(((-1.0)*x106*x59))+(((42.162785952)*x61))+(((-42.162785952)*x69))+((x110*x60))+(((3.95715313987)*x60))+(((0.250968964)*pz))+((x110*x59))+((pz*x62))+(((0.01003875856)*x64)));
IkReal x160=((0.235032434786)+(((0.263266443236)*r02))+(((-1.0)*x145))+(((-1.0)*x155))+x154+x144);
IkReal x161=((-0.186595424734)+(((-1.0)*x145))+(((-1.0)*x154))+(((0.221103657284)*r02))+x155+x144);
IkReal gconst0=x148;
IkReal gconst1=x130;
IkReal gconst2=x149;
IkReal gconst3=x160;
IkReal gconst4=x157;
IkReal gconst5=x148;
IkReal gconst6=x130;
IkReal gconst7=x149;
IkReal gconst8=x160;
IkReal gconst9=x157;
IkReal gconst10=x131;
IkReal gconst11=x132;
IkReal gconst12=x156;
IkReal gconst13=x159;
IkReal gconst14=x131;
IkReal gconst15=x132;
IkReal gconst16=x156;
IkReal gconst17=x159;
IkReal gconst18=x150;
IkReal gconst19=x143;
IkReal gconst20=x151;
IkReal gconst21=x161;
IkReal gconst22=x158;
IkReal gconst23=x150;
IkReal gconst24=x143;
IkReal gconst25=x151;
IkReal gconst26=x161;
IkReal gconst27=x158;
IkReal x162=((1.0)*gconst17);
IkReal x163=(gconst11*gconst22);
IkReal x164=((1.0)*gconst2);
IkReal x165=(gconst12*gconst26);
IkReal x166=(gconst2*gconst4);
IkReal x167=(gconst23*gconst27);
IkReal x168=(gconst11*gconst4);
IkReal x169=(gconst20*gconst23);
IkReal x170=((356.0)*r02);
IkReal x171=(gconst13*gconst16);
IkReal x172=((1.0)*gconst20);
IkReal x173=(gconst5*gconst9);
IkReal x174=(gconst20*gconst26);
IkReal x175=(gconst13*gconst24);
IkReal x176=(gconst15*gconst16);
IkReal x177=(gconst11*gconst8);
IkReal x178=(gconst24*gconst26);
IkReal x179=(gconst20*gconst6);
IkReal x180=(gconst12*gconst8);
IkReal x181=(gconst21*gconst26);
IkReal x182=(gconst11*gconst13);
IkReal x183=(gconst24*gconst8);
IkReal x184=(gconst2*gconst22);
IkReal x185=(gconst13*gconst23);
IkReal x186=(gconst16*gconst21);
IkReal x187=((1.0)*gconst14);
IkReal x188=(gconst21*gconst7);
IkReal x189=(gconst27*gconst5);
IkReal x190=(gconst13*gconst14);
IkReal x191=((1.0)*gconst3);
IkReal x192=(gconst25*gconst8);
IkReal x193=(gconst16*gconst24);
IkReal x194=((1.0)*gconst11);
IkReal x195=(gconst13*gconst6);
IkReal x196=(gconst20*gconst4);
IkReal x197=((1.0)*gconst9);
IkReal x198=(gconst25*gconst26);
IkReal x199=(gconst26*gconst6);
IkReal x200=(gconst26*gconst3);
IkReal x201=(gconst2*gconst8);
IkReal x202=(gconst20*gconst22);
IkReal x203=(gconst16*gconst6);
IkReal x204=(gconst4*gconst9);
IkReal x205=(gconst13*gconst8);
IkReal x206=(gconst6*gconst8);
IkReal x207=(gconst12*gconst16);
IkReal x208=(gconst15*gconst8);
IkReal x209=(gconst11*gconst26);
IkReal x210=(gconst16*gconst3);
IkReal x211=(gconst2*gconst26);
IkReal x212=((1.0)*gconst12);
IkReal x213=(gconst13*gconst5);
IkReal x214=((1.0)*gconst21);
IkReal x215=(gconst3*gconst7*gconst8);
IkReal x216=(gconst7*x194);
IkReal x217=(gconst14*gconst22*gconst9);
IkReal x218=(gconst14*gconst22*gconst27);
IkReal x219=(gconst14*gconst27*gconst4);
op[0]=(((gconst22*gconst24*x174))+(((-1.0)*gconst22*x167*x172))+(((-1.0)*gconst25*x172*x181)));
op[1]=((((-1.0)*x163*x167))+(((-1.0)*gconst22*x162*x169))+(((-1.0)*gconst25*x165*x172))+(((-1.0)*gconst22*x170*x174))+(((-1.0)*gconst25*x172*x186))+(((-1.0)*gconst13*x167*x172))+((x174*x175))+(((-1.0)*gconst15*x172*x181))+((x193*x202))+(((-1.0)*x172*x218))+(((-1.0)*gconst25*x181*x194))+((x163*x178)));
op[2]=(((x175*x209))+(((-1.0)*gconst15*x181*x194))+(((-1.0)*gconst27*x163*x187))+(((-1.0)*gconst23*x162*x163))+(((-1.0)*gconst13*x170*x174))+(((-1.0)*gconst14*x162*x202))+((x178*x184))+(((-1.0)*gconst22*x164*x167))+((gconst22*gconst6*x174))+(((-1.0)*gconst15*x165*x172))+(((-1.0)*gconst22*x169*x197))+(((-1.0)*gconst22*x172*x189))+(((-1.0)*gconst25*x165*x194))+(((-1.0)*gconst3*x172*x198))+(((-1.0)*gconst25*x164*x181))+(((-1.0)*gconst25*x172*x207))+(((-1.0)*gconst7*x172*x181))+(((-1.0)*gconst25*x186*x194))+(((-1.0)*gconst21*x172*x192))+((gconst20*gconst24*x171))+(((-1.0)*x167*x182))+(((-1.0)*gconst13*x162*x169))+((x183*x202))+(((-1.0)*gconst4*x167*x172))+(((-1.0)*gconst27*x172*x190))+(((-1.0)*gconst26*x163*x170))+(((-1.0)*gconst16*x170*x202))+(((-1.0)*gconst21*x172*x176))+((gconst24*gconst4*x174))+((x163*x193)));
op[3]=((((-1.0)*gconst15*x164*x181))+(((-1.0)*gconst14*x162*x163))+((x163*x183))+((gconst11*gconst24*x171))+(((-1.0)*gconst15*x165*x194))+(((-1.0)*gconst11*x191*x198))+(((-1.0)*x164*x218))+(((-1.0)*gconst25*x164*x165))+(((-1.0)*gconst23*x163*x197))+((x193*x196))+(((-1.0)*gconst27*x182*x187))+(((-1.0)*gconst15*x172*x200))+(((-1.0)*gconst8*x170*x202))+(((-1.0)*gconst25*x172*x210))+((x168*x178))+(((-1.0)*gconst13*x164*x167))+(((-1.0)*gconst25*x172*x180))+((x184*x193))+(((-1.0)*gconst25*x164*x186))+(((-1.0)*gconst23*x162*x182))+(((-1.0)*gconst23*x162*x184))+(((-1.0)*x181*x216))+((x174*x195))+(((-1.0)*gconst21*x172*x208))+(((-1.0)*x167*x168))+((gconst20*gconst8*x175))+(((-1.0)*gconst7*x172*x186))+(((-1.0)*gconst25*x177*x214))+(((-1.0)*gconst4*x162*x169))+(((-1.0)*gconst20*x170*x171))+((x175*x211))+(((-1.0)*gconst26*x170*x184))+(((-1.0)*gconst26*x170*x182))+(((-1.0)*gconst13*x169*x197))+(((-1.0)*gconst21*x176*x194))+((gconst16*gconst22*x179))+(((-1.0)*gconst25*x194*x207))+(((-1.0)*x163*x189))+(((-1.0)*gconst20*x162*x190))+(((-1.0)*x172*x217))+(((-1.0)*x172*x219))+(((-1.0)*gconst7*x165*x172))+(((-1.0)*gconst12*x172*x176))+(((-1.0)*gconst5*x162*x202))+((x163*x199))+(((-1.0)*gconst13*x172*x189))+(((-1.0)*gconst4*x170*x174))+(((-1.0)*gconst16*x163*x170)));
op[4]=((((-1.0)*gconst2*x162*x185))+(((-1.0)*gconst21*x164*x176))+(((-1.0)*gconst11*x170*x171))+((x168*x193))+(((-1.0)*gconst23*x162*x168))+(((-1.0)*gconst27*x164*x190))+(((-1.0)*gconst3*x164*x198))+(((-1.0)*gconst4*x169*x197))+(((-1.0)*gconst7*x172*x200))+(((-1.0)*gconst7*x172*x207))+(((-1.0)*x186*x216))+(((-1.0)*gconst15*x164*x165))+(((-1.0)*gconst4*x172*x189))+(((-1.0)*gconst3*x172*x192))+(((-1.0)*gconst27*x168*x187))+(((-1.0)*gconst20*x170*x205))+((x184*x199))+(((-1.0)*gconst13*x170*x211))+((x175*x177))+(((-1.0)*gconst7*x164*x181))+(((-1.0)*gconst26*x168*x170))+((x166*x178))+(((-1.0)*gconst15*x191*x209))+((gconst2*gconst24*x171))+(((-1.0)*gconst11*gconst16*gconst25*x191))+(((-1.0)*gconst5*x162*x163))+(((-1.0)*gconst25*x177*x212))+((gconst22*gconst8*x179))+(((-1.0)*gconst3*x172*x176))+(((-1.0)*gconst8*x172*x188))+((x171*x179))+(((-1.0)*gconst12*x176*x194))+(((-1.0)*gconst9*x172*x190))+(((-1.0)*gconst16*x170*x196))+(((-1.0)*gconst14*x162*x182))+(((-1.0)*gconst14*x162*x184))+(((-1.0)*gconst16*x170*x184))+(((-1.0)*gconst15*x172*x180))+(((-1.0)*gconst21*x164*x192))+(((-1.0)*gconst25*x164*x207))+(((-1.0)*gconst14*x162*x196))+(((-1.0)*gconst9*x163*x187))+((x182*x199))+((x183*x184))+(((-1.0)*gconst20*x162*x213))+((gconst4*gconst6*x174))+((x183*x196))+(((-1.0)*gconst22*gconst23*gconst9*x164))+((x163*x203))+(((-1.0)*gconst22*x164*x189))+(((-1.0)*gconst15*x177*x214))+(((-1.0)*x182*x189))+(((-1.0)*gconst23*x182*x197))+(((-1.0)*gconst4*x164*x167))+(((-1.0)*gconst22*x172*x173))+(((-1.0)*x165*x216))+(((-1.0)*gconst8*x163*x170)));
op[5]=((((-1.0)*gconst14*x172*x204))+(((-1.0)*gconst14*x162*x168))+((x175*x201))+(((-1.0)*gconst9*x164*x185))+((x168*x199))+(((-1.0)*gconst7*x172*x210))+(((-1.0)*gconst23*x162*x166))+(((-1.0)*gconst26*x166*x170))+(((-1.0)*x164*x219))+(((-1.0)*x164*x217))+(((-1.0)*gconst13*x170*x177))+(((-1.0)*gconst2*x162*x190))+(((-1.0)*gconst7*x164*x165))+((x168*x183))+(((-1.0)*gconst25*x164*x210))+(((-1.0)*gconst21*x164*x208))+(((-1.0)*x168*x189))+(((-1.0)*gconst13*x172*x173))+((gconst11*gconst6*x171))+(((-1.0)*gconst16*x168*x170))+(((-1.0)*gconst11*x176*x191))+(((-1.0)*x207*x216))+((gconst16*gconst4*x179))+(((-1.0)*gconst25*x164*x180))+((x166*x193))+(((-1.0)*gconst7*x164*x186))+((x184*x203))+(((-1.0)*gconst8*x170*x184))+(((-1.0)*gconst8*x170*x196))+((x179*x205))+(((-1.0)*gconst7*x172*x180))+(((-1.0)*gconst13*x164*x189))+(((-1.0)*gconst25*x177*x191))+(((-1.0)*gconst7*x191*x209))+(((-1.0)*gconst23*x168*x197))+(((-1.0)*gconst15*x164*x200))+(((-1.0)*gconst2*x170*x171))+(((-1.0)*gconst3*x172*x208))+(((-1.0)*gconst5*x162*x182))+(((-1.0)*gconst5*x162*x184))+(((-1.0)*gconst5*x162*x196))+(((-1.0)*x177*x188))+(((-1.0)*x163*x173))+((x163*x206))+(((-1.0)*gconst9*x182*x187))+(((-1.0)*gconst15*x177*x212))+((x195*x211))+(((-1.0)*gconst12*x164*x176)));
op[6]=((((-1.0)*gconst16*x166*x170))+(((-1.0)*gconst15*x164*x180))+((gconst4*gconst8*x179))+(((-1.0)*gconst14*x162*x166))+(((-1.0)*gconst2*x162*x213))+(((-1.0)*gconst9*x164*x190))+(((-1.0)*gconst3*x164*x192))+(((-1.0)*gconst22*x164*x173))+(((-1.0)*gconst11*gconst16*gconst7*x191))+(((-1.0)*gconst7*x164*x200))+(((-1.0)*gconst7*x164*x207))+(((-1.0)*gconst13*x170*x201))+(((-1.0)*gconst23*x164*x204))+((x166*x199))+((x184*x206))+((x166*x183))+(((-1.0)*gconst9*x168*x187))+(((-1.0)*gconst3*x164*x176))+(((-1.0)*gconst5*x162*x168))+(((-1.0)*gconst7*x177*x212))+((x168*x203))+(((-1.0)*x173*x182))+(((-1.0)*gconst15*x177*x191))+(((-1.0)*gconst8*x168*x170))+(((-1.0)*gconst4*x164*x189))+(((-1.0)*gconst4*x172*x173))+(((-1.0)*gconst8*x164*x188))+(((-1.0)*x172*x215))+((gconst2*gconst6*x171))+((x177*x195)));
op[7]=((((-1.0)*gconst13*x164*x173))+(((-1.0)*gconst14*x164*x204))+((x195*x201))+(((-1.0)*gconst7*x164*x180))+(((-1.0)*gconst7*x164*x210))+(((-1.0)*x168*x173))+(((-1.0)*gconst5*x162*x166))+(((-1.0)*gconst3*x164*x208))+((x168*x206))+(((-1.0)*gconst8*x166*x170))+((x166*x203))+(((-1.0)*gconst7*x177*x191)));
op[8]=((((-1.0)*x164*x215))+((x166*x206))+(((-1.0)*gconst4*x164*x173)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( (((0.219198649740476)+(((54.7996624351191)*cj0*px))+(((54.7996624351191)*py*sj0)))) < -1-IKFAST_SINCOS_THRESH || (((0.219198649740476)+(((54.7996624351191)*cj0*px))+(((54.7996624351191)*py*sj0)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x220=IKasin(((0.219198649740476)+(((54.7996624351191)*cj0*px))+(((54.7996624351191)*py*sj0))));
j4array[0]=((1.40564764938027)+x220);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((4.54724030297006)+(((-1.0)*x220)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x221=((1.1685393258427)*cj1);
IkReal x222=((11.2359550561798)*r02);
IkReal x223=(r00*sj0);
IkReal x224=((1.1685393258427)*sj1);
IkReal x225=((11.2359550561798)*pz);
IkReal x226=(cj0*r01);
if( IKabs(((0.0112359550561798)+(((0.112359550561798)*r02))+(((-0.0337078651685393)*cj4))+(((-0.202247191011236)*sj4))+(((-1.0)*x225*x226))+(((-1.0)*px*sj0*x222))+((x223*x225))+((cj0*py*x222))+((x221*x226))+(((-1.0)*x221*x223))+((r02*x224)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.8876404494382)+((x224*x226))+(((0.325842696629214)*r01*sj0))+(((-1.0)*r02*x221))+(((11.2359550561798)*py*r01))+((pz*x222))+(((-0.112359550561798)*x223))+(((0.325842696629214)*cj0*r00))+(((0.112359550561798)*x226))+(((-1.0)*x223*x224))+(((11.2359550561798)*px*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0112359550561798)+(((0.112359550561798)*r02))+(((-0.0337078651685393)*cj4))+(((-0.202247191011236)*sj4))+(((-1.0)*x225*x226))+(((-1.0)*px*sj0*x222))+((x223*x225))+((cj0*py*x222))+((x221*x226))+(((-1.0)*x221*x223))+((r02*x224))))+IKsqr(((-1.8876404494382)+((x224*x226))+(((0.325842696629214)*r01*sj0))+(((-1.0)*r02*x221))+(((11.2359550561798)*py*r01))+((pz*x222))+(((-0.112359550561798)*x223))+(((0.325842696629214)*cj0*r00))+(((0.112359550561798)*x226))+(((-1.0)*x223*x224))+(((11.2359550561798)*px*r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.0112359550561798)+(((0.112359550561798)*r02))+(((-0.0337078651685393)*cj4))+(((-0.202247191011236)*sj4))+(((-1.0)*x225*x226))+(((-1.0)*px*sj0*x222))+((x223*x225))+((cj0*py*x222))+((x221*x226))+(((-1.0)*x221*x223))+((r02*x224))), ((-1.8876404494382)+((x224*x226))+(((0.325842696629214)*r01*sj0))+(((-1.0)*r02*x221))+(((11.2359550561798)*py*r01))+((pz*x222))+(((-0.112359550561798)*x223))+(((0.325842696629214)*cj0*r00))+(((0.112359550561798)*x226))+(((-1.0)*x223*x224))+(((11.2359550561798)*px*r00))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x227=IKcos(j3);
IkReal x228=IKsin(j3);
IkReal x229=px*px;
IkReal x230=py*py;
IkReal x231=pz*pz;
IkReal x232=(cj0*r00);
IkReal x233=((0.00208)*sj1);
IkReal x234=((0.104)*cj1);
IkReal x235=(r00*sj0);
IkReal x236=(pz*sj0);
IkReal x237=((0.208)*cj1);
IkReal x238=((0.104)*sj1);
IkReal x239=((2.0)*py);
IkReal x240=(cj0*r01);
IkReal x241=((0.006032)*sj1);
IkReal x242=(r01*sj0);
IkReal x243=((1.0)*pz);
IkReal x244=(cj0*px);
IkReal x245=(pz*r02);
IkReal x246=(cj0*py);
IkReal x247=((0.058)*py);
IkReal x248=(px*r00);
IkReal x249=(px*r01);
IkReal x250=((0.208)*sj1);
IkReal x251=(r02*sj0);
IkReal x252=(px*sj0);
IkReal x253=((1.0)*x230);
IkReal x254=(py*x250);
IkReal x255=((1.0)*x229);
IkReal x256=((1.0)*x231);
evalcond[0]=((0.001)+((r02*x238))+(((0.01)*r02))+(((-1.0)*px*x251))+((r02*x246))+((x234*x240))+((pz*x235))+(((-0.018)*sj4))+(((-0.089)*x228))+(((-1.0)*x240*x243))+(((-0.003)*cj4))+(((-1.0)*x234*x235)));
evalcond[1]=((0.168)+((r02*x234))+(((-0.029)*x232))+(((-1.0)*x248))+(((-0.029)*x242))+(((0.089)*x227))+((x235*x238))+(((0.01)*x235))+(((-1.0)*x238*x240))+(((-1.0)*r02*x243))+(((-1.0)*py*r01))+(((-0.01)*x240)));
evalcond[2]=((0.025347)+(((-0.000906)*cj4))+(((0.000114)*sj4))+(((0.000534)*cj4*x228))+(((0.029904)*x227))+(((-0.000178)*x228))+(((0.02)*x252))+((pz*x237))+((x250*x252))+(((-1.0)*x246*x250))+(((-1.0)*x233))+(((0.003204)*sj4*x228))+(((-0.02)*x246))+(((-1.0)*sj0*x247))+(((-0.058)*x244))+(((-1.0)*x256))+(((-1.0)*x255))+(((-1.0)*x253)));
evalcond[3]=((-0.0084)+((pz*x232*x237))+((px*x235*x239))+(((0.02)*x249))+((x230*x242))+(((0.058)*x248))+(((0.058)*x245))+((x240*x241))+((x229*x232))+((x249*x250))+(((-0.006032)*cj1*r02))+(((-0.00445)*x227))+(((-1.0)*x232*x253))+(((-1.0)*x232*x256))+(((-1.0)*r02*x237*x244))+(((0.003204)*cj4*x227))+(((-1.0)*x242*x256))+(((-1.0)*x242*x255))+(((-0.010075)*x242))+(((0.00058)*x240))+((r01*x236*x237))+(((-0.00058)*x235))+(((-0.02)*py*r00))+(((-0.010075)*x232))+((px*x239*x240))+(((-1.0)*r00*x254))+(((-1.0)*x233*x242))+(((2.0)*x244*x245))+(((-1.0)*py*x237*x251))+(((-1.0)*x235*x241))+(((0.006048)*cj4))+((r01*x247))+((r02*x236*x239))+(((-1.0)*x232*x233))+(((-0.001008)*sj4))+(((-0.000534)*sj4*x227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x257=(sj1*sj3);
IkReal x258=(r00*sj0);
IkReal x259=(cj0*r01);
IkReal x260=(cj1*cj3);
IkReal x261=(cj1*sj3);
IkReal x262=((1.0)*r02);
IkReal x263=(cj3*sj1);
if( IKabs(((((-1.0)*x262*x263))+((x258*x260))+(((-1.0)*x259*x260))+((x257*x259))+(((-1.0)*x257*x258))+(((-1.0)*x261*x262)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x258*x261))+((x258*x263))+((r02*x260))+(((-1.0)*x259*x261))+(((-1.0)*x259*x263))+(((-1.0)*x257*x262)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x262*x263))+((x258*x260))+(((-1.0)*x259*x260))+((x257*x259))+(((-1.0)*x257*x258))+(((-1.0)*x261*x262))))+IKsqr((((x258*x261))+((x258*x263))+((r02*x260))+(((-1.0)*x259*x261))+(((-1.0)*x259*x263))+(((-1.0)*x257*x262))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x262*x263))+((x258*x260))+(((-1.0)*x259*x260))+((x257*x259))+(((-1.0)*x257*x258))+(((-1.0)*x261*x262))), (((x258*x261))+((x258*x263))+((r02*x260))+(((-1.0)*x259*x261))+(((-1.0)*x259*x263))+(((-1.0)*x257*x262))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x264=IKsin(j2);
IkReal x265=IKcos(j2);
IkReal x266=py*py;
IkReal x267=pz*pz;
IkReal x268=px*px;
IkReal x269=((0.003)*cj4);
IkReal x270=(r01*sj0);
IkReal x271=(cj0*sj1);
IkReal x272=(pz*r00);
IkReal x273=(cj1*pz);
IkReal x274=(cj1*px);
IkReal x275=((0.02)*r00);
IkReal x276=((1.0)*r02);
IkReal x277=((0.029)*r01);
IkReal x278=(cj1*r02);
IkReal x279=((0.01)*cj1);
IkReal x280=(pz*r01);
IkReal x281=((0.058)*sj1);
IkReal x282=(r00*sj0);
IkReal x283=(cj0*cj1);
IkReal x284=((0.02)*r02);
IkReal x285=((0.029)*sj1);
IkReal x286=((1.0)*r01);
IkReal x287=((0.01)*sj1);
IkReal x288=(cj0*r01);
IkReal x289=(cj0*r00);
IkReal x290=((0.018)*sj3);
IkReal x291=((0.208)*px);
IkReal x292=(px*r01);
IkReal x293=((0.003)*sj4);
IkReal x294=((0.006048)*sj4);
IkReal x295=((0.000114)*sj4);
IkReal x296=((2.0)*py);
IkReal x297=(py*r01);
IkReal x298=(py*r00);
IkReal x299=((0.000906)*cj4);
IkReal x300=(cj0*r02);
IkReal x301=(pz*r02);
IkReal x302=((0.001008)*cj4);
IkReal x303=((0.018)*cj4);
IkReal x304=((1.0)*py);
IkReal x305=(pz*sj1);
IkReal x306=((0.02)*sj1);
IkReal x307=((0.018)*sj4);
IkReal x308=(px*r02);
IkReal x309=((0.003204)*sj4);
IkReal x310=(cj1*sj0);
IkReal x311=((0.00058)*r00);
IkReal x312=(py*sj0);
IkReal x313=(px*sj1);
IkReal x314=(cj3*x265);
IkReal x315=(sj1*x296);
IkReal x316=(py*x300);
IkReal x317=(cj1*x266);
IkReal x318=(sj0*x313);
IkReal x319=(cj3*x264);
IkReal x320=(sj3*x264);
IkReal x321=(sj1*x266);
IkReal x322=(cj1*x267);
IkReal x323=(cj4*x265);
IkReal x324=(sj1*x268);
IkReal x325=(sj3*x265);
IkReal x326=(sj1*x267);
evalcond[0]=(x320+x278+(((-1.0)*x271*x286))+(((-1.0)*x314))+((sj1*x282)));
evalcond[1]=((((-1.0)*sj1*x276))+(((-1.0)*x325))+(((-1.0)*x319))+((cj1*x282))+(((-1.0)*x283*x286)));
evalcond[2]=((-0.104)+(((-0.089)*x265))+(((-1.0)*x269*x319))+(((-0.168)*x314))+(((0.168)*x320))+(((0.001)*x319))+x318+x273+(((0.001)*x325))+(((-1.0)*x307*x319))+(((-1.0)*x287))+(((-1.0)*sj4*x265*x290))+(((-1.0)*x269*x325))+(((-1.0)*x271*x304)));
evalcond[3]=((((-0.089)*x264))+(((-1.0)*sj4*x264*x290))+(((-0.001)*x314))+(((-0.168)*x319))+((x269*x314))+(((-1.0)*x305))+((x307*x314))+(((-0.168)*x325))+(((0.001)*x320))+(((-1.0)*x279))+((sj0*x274))+(((-1.0)*x269*x320))+(((-1.0)*x283*x304)));
evalcond[4]=((((-1.0)*x277*x283))+((x290*x323))+(((-1.0)*r02*x285))+((x271*x272))+((x279*x289))+(((-0.025)*x325))+(((-1.0)*px*x271*x276))+((cj1*x298))+(((-1.0)*sj1*x276*x312))+(((0.029)*cj1*x282))+(((-1.0)*x293*x325))+((x270*x279))+(((-0.025)*x319))+((x270*x305))+(((-1.0)*x293*x319))+((x303*x319))+(((-1.0)*x274*x286)));
evalcond[5]=((((-1.0)*x270*x287))+((x293*x314))+((x271*x277))+(((-0.025)*x320))+(((-1.0)*sj1*x298))+(((0.025)*x314))+(((-1.0)*x303*x314))+((sj1*x292))+(((-0.029)*x278))+(((-1.0)*x293*x320))+((x270*x273))+((x272*x283))+(((-1.0)*x282*x285))+((cj4*x264*x290))+(((-0.01)*r00*x271))+(((-1.0)*py*x276*x310))+(((-0.104)*x270))+(((-0.104)*x289))+(((-1.0)*cj0*x274*x276)));
evalcond[6]=((((-1.0)*x270*x274*x296))+((r02*x326))+((x273*x296*x300))+(((-1.0)*x268*x283*x286))+(((-0.058)*r01*x274))+(((0.00058)*cj1*x270))+(((-0.000534)*x323))+(((-1.0)*r02*x281*x312))+(((-1.0)*x265*x309))+(((0.035186)*x319))+(((-0.058)*x271*x308))+(((0.011557)*cj1*x282))+((r01*x266*x283))+(((-1.0)*x294*x314))+(((0.019344)*x325))+((x282*x322))+(((2.0)*x272*x313))+((x302*x320))+((x274*x275))+((x274*x289*x296))+(((-1.0)*x302*x314))+((x299*x319))+(((-1.0)*cj1*x268*x282))+(((-1.0)*x295*x319))+((x283*x311))+(((-0.208)*sj0*x272))+(((0.208)*cj0*x280))+(((-0.00208)*r02))+((x284*x318))+(((-1.0)*py*x271*x284))+(((-2.0)*sj0*x273*x308))+(((-1.0)*x276*x321))+(((-1.0)*x276*x324))+(((0.000336)*x314))+(((0.02)*cj1*x297))+((x273*x284))+((x280*x315))+(((0.029904)*x264))+(((-0.011557)*r01*x283))+(((-0.000336)*x320))+(((-1.0)*x267*x283*x286))+((x282*x317))+(((0.000178)*x265))+((pz*x270*x281))+((x299*x325))+(((-1.0)*x295*x325))+(((-0.011757)*r02*sj1))+((x294*x320))+(((0.02)*x271*x280))+(((-1.0)*sj0*x272*x306))+(((-0.208)*x316))+((r02*sj0*x291))+(((0.058)*cj1*x298))+(((0.058)*x271*x272)));
evalcond[7]=(((x294*x319))+(((-2.0)*x272*x274))+(((-1.0)*x282*x324))+((x302*x319))+(((0.208)*x301))+((x266*x278))+((px*r00*x271*x296))+(((0.208)*x297))+(((-0.02)*x273*x288))+((x264*x309))+(((-1.0)*x299*x320))+(((0.006032)*x289))+(((0.035186)*x314))+(((-0.058)*x270*x273))+(((0.02)*cj0*py*x278))+((x275*x313))+((x271*x311))+(((-1.0)*x267*x271*x286))+((x282*x326))+((x282*x321))+((x281*x298))+((x302*x325))+(((-0.00208)*x282))+(((-0.000336)*x319))+(((-0.019344)*x320))+(((0.006032)*x270))+((x299*x314))+((x284*x305))+(((-1.0)*x295*x314))+((x271*x296*x301))+(((0.00208)*x288))+(((0.02)*x272*x310))+(((-1.0)*x268*x271*x286))+((r01*x266*x271))+(((-0.009875)*x278))+(((-1.0)*x276*x322))+(((0.029904)*x265))+((x297*x306))+(((0.000534)*cj4*x264))+(((0.058)*x278*x312))+(((-0.000336)*x325))+((r00*x291))+(((-2.0)*x301*x318))+(((-1.0)*sj0*x274*x284))+(((-1.0)*x270*x296*x313))+((x294*x325))+(((-1.0)*r01*x273*x296))+(((0.058)*x274*x300))+(((0.010075)*r01*x271))+(((-0.010075)*sj1*x282))+(((-1.0)*x281*x292))+((x295*x320))+(((-0.000178)*x264))+(((-0.058)*x272*x283))+(((0.00058)*sj1*x270))+((x268*x278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - learm (5158c2e35937d3ecee8e7628baecce8a)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
