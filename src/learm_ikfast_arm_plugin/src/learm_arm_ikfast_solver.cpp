/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-06-10 13:10:18.972415
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28;
x0=IKsin(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[0]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((0.02)*x9);
x11=((0.02)*x6);
x12=((0.02)*x5);
x13=((0.17)*x0);
x14=((1.0)*x7);
x15=((1.0)*x0);
x16=((0.17)*x7);
x17=((0.1)*x2);
x18=(x1*x3);
x19=(x2*x4);
x20=(x3*x4);
x21=(x1*x2);
x22=((1.0)*x18);
x23=((0.09)*x21);
x24=(x1*x13);
x25=((((-1.0)*x21))+(((-1.0)*x20)));
x26=(x15*(((((-1.0)*x19))+x18)));
x27=(x14*(((((-1.0)*x18))+x19)));
x28=(x15*((x20+x21)));
eetrans[0]=((((0.09)*x0*x20))+((x0*x23))+((x6*(((((-1.0)*x13*x19))+((x13*x18))))))+((x0*x17))+(((-1.0)*x8*(((((-1.0)*x11*x28))+((x12*x26))))))+(((-1.0)*x10*x7))+(((0.01)*x0))+((x5*((((x13*x21))+((x13*x20)))))));
IkReal x29=((1.0)*x16);
IkReal x30=(x20*x7);
IkReal x31=((1.0)*x7);
eetrans[1]=(((x6*(((((-1.0)*x18*x29))+((x16*x19))))))+(((-1.0)*x23*x31))+(((-0.01)*x7))+(((-1.0)*x0*x10))+((x8*(((((-1.0)*x12*x27))+(((-1.0)*x11*((((x21*x7))+x30))))))))+((x5*(((((-1.0)*x21*x29))+(((-1.0)*x20*x29))))))+(((-0.09)*x30))+(((-1.0)*x17*x31)));
eetrans[2]=((0.09)+((x6*(((((-0.17)*x20))+(((-0.17)*x21))))))+(((-1.0)*x8*((((x11*(((((-1.0)*x22))+x19))))+((x12*x25))))))+(((0.1)*x3))+((x5*(((((-0.17)*x19))+(((0.17)*x18))))))+(((-0.09)*x19))+(((0.09)*x18)));
eerot[0]=(((x28*x5))+((x26*x6)));
IkReal x32=((1.0)*x14);
eerot[1]=(((x27*x6))+((x5*(((((-1.0)*x20*x32))+(((-1.0)*x21*x32)))))));
eerot[2]=(((x5*(((((-1.0)*x19))+x22))))+((x25*x6)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.09)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x34 = IKatan2WithCheck(IkReal(((-1.0)*r00)),IkReal(((-1.0)*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x34.valid){
continue;
}
IkReal x33=x34.value;
j0array[0]=((-1.0)*x33);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x33)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[8+1], zeror[8];
int numroots;
IkReal x35=(r00*sj0);
IkReal x36=((19.0)*r02);
IkReal x37=((323.0)*r02);
IkReal x38=((1900.0)*pz);
IkReal x39=((17.0)*r02);
IkReal x40=((100.0)*pz);
IkReal x41=(r01*sj0);
IkReal x42=((100.0)*py);
IkReal x43=(cj0*r01);
IkReal x44=(px*sj0);
IkReal x45=(px*r00);
IkReal x46=(cj0*py);
IkReal x47=(cj0*r00);
IkReal x48=((100.0)*x44);
IkReal x49=((1700.0)*pz*r02);
IkReal x50=((51.0)*x41);
IkReal x51=((1700.0)*x45);
IkReal x52=((51.0)*x47);
IkReal x53=((1700.0)*py*r01);
IkReal x54=((17.0)*x43);
IkReal x55=((17.0)*x35);
IkReal x56=((5000.0)*(pz*pz));
IkReal x57=((5000.0)*(px*px));
IkReal x58=((5000.0)*(py*py));
IkReal x59=(cj0*x42);
IkReal x60=((((-3600.0)*pz))+(((612.0)*r02)));
IkReal x61=((1.0)*x43);
IkReal x62=(r02*x40);
IkReal x63=(r01*x42);
IkReal x64=((3.0)*x41);
IkReal x65=((100.0)*x45);
IkReal x66=((3.0)*x47);
IkReal x67=((18.0)*x43);
IkReal x68=((18.0)*x35);
IkReal x69=((17.0)+x35);
IkReal x70=((1800.0)*x46);
IkReal x71=((306.0)*x35);
IkReal x72=((1800.0)*x44);
IkReal x73=((306.0)*x43);
IkReal x74=(x68+(((-1.0)*x67)));
IkReal x75=((((-38.0)*x43))+(((38.0)*x35)));
IkReal x76=((((2.0)*x35))+(((-2.0)*x43)));
IkReal x77=(x67+(((-1.0)*x68)));
IkReal x78=(x73+x72);
IkReal x79=(x71+x70);
IkReal x80=((-18.0)+(((-1.0)*x79))+x78);
IkReal x81=((-38.0)+(((3800.0)*x44))+(((646.0)*x43))+(((-3800.0)*x46))+(((-646.0)*x35)));
IkReal x82=((-2.0)+(((-34.0)*x35))+(((-200.0)*x46))+(((34.0)*x43))+(((200.0)*x44)));
IkReal x83=((18.0)+(((-1.0)*x78))+x79);
IkReal x84=(x59+x58+x55+x57+x56);
IkReal x85=(x61+x62+x63+x64+x65+x66);
IkReal x86=(x69+r02+(((-1.0)*x85)));
IkReal x87=(x36+x69+(((-1.0)*x85)));
IkReal x88=((((-1.0)*x36))+x69+(((-1.0)*x85)));
IkReal x89=((((-1.0)*r02))+x69+(((-1.0)*x85)));
IkReal x90=((-143.5)+x48+x49+x54+x51+x50+x53+x52);
IkReal x91=((-323.5)+x48+x49+x54+x51+x50+x53+x52);
IkReal x92=((((-1.0)*x37))+x38+x91+(((-1.0)*x84)));
IkReal x93=((((-1.0)*x39))+x40+x90+(((-1.0)*x84)));
IkReal x94=((((-1.0)*x38))+x37+x91+(((-1.0)*x84)));
IkReal x95=((((-1.0)*x40))+x39+x90+(((-1.0)*x84)));
IkReal gconst0=x87;
IkReal gconst1=x74;
IkReal gconst2=x86;
IkReal gconst3=x92;
IkReal gconst4=x80;
IkReal gconst5=x93;
IkReal gconst6=x87;
IkReal gconst7=x74;
IkReal gconst8=x86;
IkReal gconst9=x92;
IkReal gconst10=x80;
IkReal gconst11=x93;
IkReal gconst12=x75;
IkReal gconst13=x76;
IkReal gconst14=x81;
IkReal gconst15=x60;
IkReal gconst16=x82;
IkReal gconst17=x75;
IkReal gconst18=x76;
IkReal gconst19=x81;
IkReal gconst20=x60;
IkReal gconst21=x82;
IkReal gconst22=x88;
IkReal gconst23=x77;
IkReal gconst24=x89;
IkReal gconst25=x94;
IkReal gconst26=x83;
IkReal gconst27=x95;
IkReal gconst28=x88;
IkReal gconst29=x77;
IkReal gconst30=x89;
IkReal gconst31=x94;
IkReal gconst32=x83;
IkReal gconst33=x95;
IkReal x96=((1.0)*gconst28);
IkReal x97=(gconst27*gconst33);
IkReal x98=(gconst26*gconst32);
IkReal x99=(gconst2*gconst7);
IkReal x100=(gconst24*gconst25);
IkReal x101=(gconst30*gconst31);
IkReal x102=(gconst16*gconst22);
IkReal x103=((36.0)*r02);
IkReal x104=(gconst2*gconst9);
IkReal x105=((1.0)*gconst23);
IkReal x106=(gconst1*gconst5);
IkReal x107=(gconst10*gconst17);
IkReal x108=(gconst22*gconst27);
IkReal x109=(gconst0*gconst16);
IkReal x110=(gconst11*gconst2);
IkReal x111=(gconst24*gconst26);
IkReal x112=((1.0)*gconst3);
IkReal x113=(gconst13*gconst4);
IkReal x114=(gconst7*gconst9);
IkReal x115=(gconst12*gconst5);
IkReal x116=(gconst20*gconst6);
IkReal x117=(gconst2*gconst4);
IkReal x118=(gconst0*gconst5);
IkReal x119=(gconst27*gconst32);
IkReal x120=(gconst28*gconst33);
IkReal x121=(gconst19*gconst8);
IkReal x122=(gconst13*gconst25);
IkReal x123=(gconst8*gconst9);
IkReal x124=(gconst19*gconst30);
IkReal x125=((1.0)*gconst17);
IkReal x126=(gconst19*gconst29);
IkReal x127=(gconst29*gconst31);
IkReal x128=(gconst15*gconst24);
IkReal x129=(gconst14*gconst24);
IkReal x130=(gconst10*gconst6);
IkReal x131=(gconst18*gconst31);
IkReal x132=(gconst1*gconst16);
IkReal x133=(gconst23*gconst28);
IkReal x134=(gconst2*gconst3*gconst6);
IkReal x135=(gconst27*x127);
IkReal x136=((1.0)*gconst11*gconst6);
IkReal x137=((1.0)*x130);
op[0]=((((-1.0)*gconst22*x96*x97))+((x111*x127))+(((-1.0)*gconst24*x96*x98))+(((-1.0)*x105*x135))+(((-1.0)*x100*x101))+((x100*x120))+((x101*x108))+((x119*x133)));
op[1]=(((gconst23*gconst27*gconst31*x103))+((x111*x126))+((gconst21*gconst28*x100))+((x103*x135))+(((-1.0)*gconst24*x125*x98))+((x108*x124))+((gconst16*gconst32*x133))+(((-1.0)*gconst16*x105*x127))+((x108*x131))+(((-1.0)*gconst22*x125*x97))+((x120*x122))+((x120*x129))+(((-1.0)*gconst13*x96*x98))+(((-1.0)*x100*x131))+((gconst17*gconst33*x100))+(((-1.0)*x101*x129))+(((-1.0)*x101*x122))+(((-1.0)*x100*x124))+(((-1.0)*gconst32*x128*x96))+(((-1.0)*gconst27*x105*x126))+((gconst17*gconst23*x119))+(((-1.0)*gconst28*x103*x119))+(((-1.0)*gconst31*x103*x111))+((gconst12*gconst27*x101))+((gconst20*gconst27*x133))+((gconst13*gconst26*x127))+(((-1.0)*gconst21*x108*x96))+(((-1.0)*gconst20*x111*x96))+((x101*x102))+((x127*x128))+(((-1.0)*gconst12*x96*x97))+(((-1.0)*gconst33*x102*x96)));
op[2]=((((-1.0)*gconst24*gconst28*gconst32*gconst4))+((gconst22*gconst27*gconst31*gconst8))+((gconst10*gconst23*gconst27*gconst28))+((gconst13*gconst17*gconst25*gconst33))+((gconst11*gconst24*gconst25*gconst28))+(((-1.0)*gconst2*gconst26*gconst28*gconst32))+((gconst16*gconst19*gconst22*gconst30))+(((-1.0)*gconst23*gconst27*gconst29*gconst9))+((gconst17*gconst21*gconst24*gconst25))+(((-1.0)*gconst15*gconst17*gconst24*gconst32))+(((36.0)*gconst19*gconst23*gconst27*r02))+((gconst12*gconst18*gconst27*gconst31))+(((-1.0)*gconst16*gconst19*gconst23*gconst29))+(((-1.0)*gconst17*gconst21*gconst22*gconst27))+(((-1.0)*gconst13*gconst15*gconst28*gconst32))+((gconst16*gconst17*gconst23*gconst32))+(((-1.0)*gconst12*gconst16*gconst28*gconst33))+((gconst15*gconst19*gconst24*gconst29))+((gconst23*gconst27*gconst32*gconst6))+(((-1.0)*gconst16*gconst21*gconst22*gconst28))+(((-1296.0)*gconst27*gconst31*(r02*r02)))+((gconst22*gconst27*gconst30*gconst9))+(((-1.0)*gconst2*gconst25*gconst30*gconst31))+(((-1.0)*gconst13*gconst19*gconst25*gconst30))+((gconst13*gconst15*gconst29*gconst31))+(((-1.0)*gconst23*gconst27*gconst31*gconst7))+(((-1.0)*gconst13*gconst14*gconst30*gconst31))+(((36.0)*gconst16*gconst29*gconst31*r02))+((gconst24*gconst29*gconst31*gconst4))+(((36.0)*gconst16*gconst23*gconst31*r02))+(((-1.0)*gconst12*gconst17*gconst27*gconst33))+((gconst24*gconst25*gconst33*gconst6))+((gconst13*gconst21*gconst25*gconst28))+((gconst18*gconst19*gconst22*gconst27))+((gconst0*gconst27*gconst30*gconst31))+((gconst16*gconst18*gconst22*gconst31))+((gconst16*gconst20*gconst23*gconst28))+((gconst23*gconst28*gconst32*gconst5))+(((-36.0)*gconst17*gconst27*gconst32*r02))+(((-1.0)*gconst12*gconst21*gconst27*gconst28))+((gconst17*gconst20*gconst23*gconst27))+(((-36.0)*gconst15*gconst24*gconst31*r02))+(((36.0)*gconst19*gconst27*gconst29*r02))+((gconst12*gconst19*gconst27*gconst30))+(((-1.0)*gconst18*gconst19*gconst24*gconst25))+(((-1.0)*gconst0*gconst27*gconst28*gconst33))+(((-36.0)*gconst20*gconst27*gconst28*r02))+(((-1.0)*gconst13*gconst17*gconst26*gconst32))+(((-1.0)*gconst17*gconst20*gconst24*gconst26))+(((-1.0)*gconst13*gconst18*gconst25*gconst31))+(((-36.0)*gconst13*gconst26*gconst31*r02))+(((-36.0)*gconst19*gconst24*gconst26*r02))+(((-1.0)*gconst15*gconst20*gconst24*gconst28))+((gconst13*gconst14*gconst28*gconst33))+((gconst1*gconst27*gconst28*gconst32))+(((-1.0)*gconst24*gconst25*gconst31*gconst8))+(((-1.0)*gconst16*gconst17*gconst22*gconst33))+((gconst24*gconst26*gconst29*gconst9))+((gconst12*gconst16*gconst30*gconst31))+(((-1.0)*gconst24*gconst3*gconst30*gconst31))+(((-1.0)*gconst22*gconst28*gconst33*gconst5))+((gconst14*gconst17*gconst24*gconst33))+(((-1.0)*gconst24*gconst26*gconst32*gconst6))+(((-1.0)*gconst22*gconst27*gconst33*gconst6))+((gconst14*gconst21*gconst24*gconst28))+(((-1.0)*gconst14*gconst19*gconst24*gconst30))+(((-1.0)*gconst1*gconst27*gconst29*gconst31))+((gconst24*gconst26*gconst31*gconst7))+(((-1.0)*gconst13*gconst20*gconst26*gconst28))+(((-1.0)*gconst23*gconst29*gconst31*gconst5))+((gconst24*gconst28*gconst3*gconst33))+(((-1.0)*gconst14*gconst18*gconst24*gconst31))+((gconst22*gconst30*gconst31*gconst5))+((gconst13*gconst19*gconst26*gconst29))+((gconst2*gconst26*gconst29*gconst31))+(((-1.0)*gconst11*gconst22*gconst27*gconst28))+((gconst2*gconst25*gconst28*gconst33))+(((-1.0)*gconst10*gconst24*gconst26*gconst28))+(((-36.0)*gconst16*gconst28*gconst32*r02))+(((-1.0)*gconst24*gconst25*gconst30*gconst9)));
op[3]=((((-1.0)*gconst1*gconst16*gconst29*gconst31))+(((-1.0)*gconst14*gconst24*gconst30*gconst9))+((gconst12*gconst27*gconst30*gconst9))+(((36.0)*gconst16*gconst19*gconst23*r02))+(((-1.0)*gconst12*gconst28*gconst33*gconst5))+((gconst0*gconst16*gconst30*gconst31))+((gconst20*gconst23*gconst27*gconst6))+(((-36.0)*gconst2*gconst26*gconst31*r02))+(((-1.0)*gconst13*gconst25*gconst30*gconst9))+(((-1.0)*gconst0*gconst16*gconst28*gconst33))+((gconst0*gconst18*gconst27*gconst31))+((gconst19*gconst24*gconst26*gconst7))+((gconst18*gconst22*gconst27*gconst9))+(((-1.0)*gconst2*gconst20*gconst26*gconst28))+((gconst21*gconst24*gconst28*gconst3))+((gconst1*gconst16*gconst28*gconst32))+(((-1.0)*gconst21*gconst22*gconst28*gconst5))+(((-1.0)*gconst11*gconst16*gconst22*gconst28))+(((-1.0)*gconst18*gconst24*gconst3*gconst31))+((gconst19*gconst22*gconst30*gconst5))+(((-1.0)*gconst11*gconst12*gconst27*gconst28))+((gconst10*gconst16*gconst23*gconst28))+(((-1.0)*gconst16*gconst22*gconst33*gconst6))+(((-1.0)*gconst19*gconst24*gconst25*gconst8))+((gconst15*gconst24*gconst31*gconst7))+(((-1.0)*gconst10*gconst13*gconst26*gconst28))+(((-36.0)*gconst10*gconst27*gconst28*r02))+((gconst14*gconst24*gconst33*gconst6))+((gconst14*gconst2*gconst28*gconst33))+((gconst16*gconst22*gconst31*gconst8))+((gconst16*gconst17*gconst20*gconst23))+(((36.0)*gconst27*gconst31*gconst7*r02))+(((-1.0)*gconst15*gconst24*gconst32*gconst6))+(((-1.0)*gconst13*gconst25*gconst31*gconst8))+((gconst17*gconst24*gconst3*gconst33))+(((-1.0)*gconst17*gconst24*gconst32*gconst4))+((gconst19*gconst24*gconst29*gconst4))+(((-1.0)*gconst21*gconst22*gconst27*gconst6))+(((-1.0)*gconst17*gconst2*gconst26*gconst32))+(((-1.0)*gconst13*gconst17*gconst20*gconst26))+(((-1.0)*gconst16*gconst23*gconst31*gconst7))+(((-1.0)*gconst13*gconst28*gconst32*gconst4))+(((-1.0)*gconst14*gconst18*gconst19*gconst24))+(((-36.0)*gconst13*gconst19*gconst26*r02))+(((-1.0)*gconst12*gconst17*gconst21*gconst27))+(((-36.0)*gconst24*gconst31*gconst4*r02))+(((36.0)*gconst23*gconst27*gconst9*r02))+((gconst16*gconst23*gconst32*gconst6))+((gconst19*gconst22*gconst27*gconst8))+(((-36.0)*gconst28*gconst32*gconst5*r02))+(((-1.0)*gconst10*gconst17*gconst24*gconst26))+(((-1296.0)*gconst16*gconst31*(r02*r02)))+((gconst20*gconst23*gconst28*gconst5))+((gconst17*gconst2*gconst25*gconst33))+(((-1.0)*gconst20*gconst24*gconst26*gconst6))+(((-1.0)*gconst13*gconst26*gconst32*gconst6))+(((-1.0)*gconst13*gconst3*gconst30*gconst31))+(((-1.0)*gconst13*gconst18*gconst19*gconst25))+(((-1.0)*gconst19*gconst23*gconst29*gconst5))+(((-1.0)*gconst19*gconst24*gconst3*gconst30))+(((-1.0)*gconst12*gconst16*gconst17*gconst33))+(((-1.0)*gconst16*gconst17*gconst21*gconst22))+((gconst13*gconst26*gconst29*gconst9))+((gconst16*gconst22*gconst30*gconst9))+((gconst15*gconst24*gconst29*gconst9))+(((36.0)*gconst27*gconst29*gconst9*r02))+((gconst12*gconst18*gconst19*gconst27))+((gconst10*gconst17*gconst23*gconst27))+((gconst13*gconst26*gconst31*gconst7))+((gconst13*gconst29*gconst31*gconst4))+((gconst17*gconst23*gconst32*gconst5))+(((36.0)*gconst23*gconst31*gconst5*r02))+(((-1.0)*gconst1*gconst19*gconst27*gconst29))+((gconst2*gconst21*gconst25*gconst28))+((gconst13*gconst25*gconst33*gconst6))+(((-1.0)*gconst20*gconst24*gconst28*gconst4))+(((-1.0)*gconst12*gconst16*gconst21*gconst28))+(((-1.0)*gconst17*gconst22*gconst33*gconst5))+(((-36.0)*gconst15*gconst19*gconst24*r02))+((gconst12*gconst16*gconst18*gconst31))+(((-36.0)*gconst17*gconst20*gconst27*r02))+((gconst11*gconst14*gconst24*gconst28))+((gconst0*gconst19*gconst27*gconst30))+(((-1.0)*gconst13*gconst14*gconst18*gconst31))+((gconst1*gconst17*gconst27*gconst32))+((gconst14*gconst17*gconst21*gconst24))+((gconst19*gconst2*gconst26*gconst29))+(((-1.0)*gconst14*gconst24*gconst31*gconst8))+(((-1.0)*gconst18*gconst24*gconst25*gconst9))+(((-1.0)*gconst13*gconst14*gconst19*gconst30))+(((-1.0)*gconst0*gconst21*gconst27*gconst28))+(((-1.0)*gconst10*gconst15*gconst24*gconst28))+(((-1.0)*gconst18*gconst2*gconst25*gconst31))+((gconst1*gconst20*gconst27*gconst28))+(((-1.0)*gconst12*gconst27*gconst33*gconst6))+(((-36.0)*gconst16*gconst17*gconst32*r02))+(((-36.0)*gconst24*gconst26*gconst9*r02))+((gconst11*gconst13*gconst25*gconst28))+((gconst13*gconst15*gconst19*gconst29))+(((-1.0)*gconst13*gconst15*gconst20*gconst28))+(((-1296.0)*gconst19*gconst27*(r02*r02)))+((gconst18*gconst22*gconst31*gconst5))+(((-1.0)*gconst15*gconst17*gconst20*gconst24))+(((-36.0)*gconst16*gconst20*gconst28*r02))+(((-36.0)*gconst13*gconst15*gconst31*r02))+((gconst11*gconst17*gconst24*gconst25))+(((-1.0)*gconst0*gconst17*gconst27*gconst33))+((gconst12*gconst30*gconst31*gconst5))+((gconst12*gconst16*gconst19*gconst30))+(((-1.0)*gconst16*gconst23*gconst29*gconst9))+((gconst13*gconst28*gconst3*gconst33))+((gconst13*gconst14*gconst17*gconst33))+(((-1.0)*gconst19*gconst23*gconst27*gconst7))+((gconst21*gconst24*gconst25*gconst6))+(((-36.0)*gconst27*gconst32*gconst6*r02))+((gconst15*gconst2*gconst29*gconst31))+(((-1.0)*gconst14*gconst2*gconst30*gconst31))+((gconst13*gconst14*gconst21*gconst28))+(((-1.0)*gconst11*gconst17*gconst22*gconst27))+((gconst13*gconst17*gconst21*gconst25))+(((36.0)*gconst1*gconst27*gconst31*r02))+(((-1.0)*gconst19*gconst2*gconst25*gconst30))+(((36.0)*gconst29*gconst31*gconst5*r02))+(((36.0)*gconst16*gconst19*gconst29*r02))+(((-1.0)*gconst13*gconst15*gconst17*gconst32))+((gconst16*gconst18*gconst19*gconst22))+((gconst12*gconst27*gconst31*gconst8))+(((-1.0)*gconst15*gconst2*gconst28*gconst32)));
op[4]=(((gconst10*gconst23*gconst28*gconst5))+(((36.0)*gconst16*gconst23*gconst9*r02))+(((-1.0)*gconst15*gconst20*gconst24*gconst6))+(((-1.0)*gconst0*gconst27*gconst33*gconst6))+(((-1.0)*gconst11*gconst22*gconst27*gconst6))+((gconst13*gconst14*gconst17*gconst21))+((gconst18*gconst19*gconst22*gconst5))+(((36.0)*gconst19*gconst23*gconst5*r02))+(((-1.0)*gconst0*gconst11*gconst27*gconst28))+(((36.0)*gconst16*gconst29*gconst9*r02))+(((-1.0)*gconst16*gconst19*gconst23*gconst7))+((gconst13*gconst19*gconst29*gconst4))+((gconst1*gconst27*gconst32*gconst6))+(((-36.0)*gconst13*gconst15*gconst19*r02))+(((36.0)*gconst1*gconst19*gconst27*r02))+((gconst12*gconst19*gconst27*gconst8))+(((-36.0)*gconst13*gconst26*gconst9*r02))+(((-1.0)*gconst24*gconst25*gconst8*gconst9))+(((-1.0)*gconst13*gconst15*gconst17*gconst20))+((gconst2*gconst28*gconst3*gconst33))+((gconst16*gconst20*gconst23*gconst6))+((gconst13*gconst15*gconst31*gconst7))+(((-1.0)*gconst18*gconst19*gconst24*gconst3))+((gconst14*gconst2*gconst21*gconst28))+(((-1296.0)*gconst27*gconst9*(r02*r02)))+(((36.0)*gconst16*gconst31*gconst7*r02))+(((-1.0)*gconst13*gconst17*gconst32*gconst4))+(((-1296.0)*gconst31*gconst5*(r02*r02)))+(((-1.0)*gconst12*gconst21*gconst28*gconst5))+(((-1.0)*gconst23*gconst27*gconst7*gconst9))+((gconst0*gconst18*gconst19*gconst27))+((gconst22*gconst30*gconst5*gconst9))+((gconst13*gconst19*gconst26*gconst7))+(((-1.0)*gconst14*gconst19*gconst2*gconst30))+((gconst22*gconst31*gconst5*gconst8))+(((-1.0)*gconst24*gconst3*gconst31*gconst8))+(((-1.0)*gconst1*gconst16*gconst19*gconst29))+((gconst22*gconst27*gconst8*gconst9))+(((-36.0)*gconst17*gconst32*gconst5*r02))+(((-1.0)*gconst13*gconst18*gconst3*gconst31))+(((-1.0)*gconst12*gconst17*gconst33*gconst5))+(((-1.0)*gconst10*gconst13*gconst17*gconst26))+((gconst2*gconst26*gconst29*gconst9))+((gconst13*gconst15*gconst29*gconst9))+((gconst0*gconst27*gconst30*gconst9))+((gconst1*gconst16*gconst20*gconst28))+((gconst11*gconst14*gconst17*gconst24))+(((-1.0)*gconst12*gconst16*gconst17*gconst21))+(((-36.0)*gconst10*gconst16*gconst28*r02))+(((-36.0)*gconst16*gconst32*gconst6*r02))+((gconst12*gconst18*gconst31*gconst5))+((gconst24*gconst3*gconst33*gconst6))+(((-1.0)*gconst1*gconst27*gconst29*gconst9))+(((-1.0)*gconst17*gconst2*gconst20*gconst26))+((gconst13*gconst17*gconst3*gconst33))+(((-1.0)*gconst13*gconst15*gconst32*gconst6))+(((36.0)*gconst19*gconst29*gconst5*r02))+((gconst13*gconst21*gconst25*gconst6))+(((-1296.0)*gconst16*gconst19*(r02*r02)))+((gconst0*gconst16*gconst18*gconst31))+((gconst0*gconst30*gconst31*gconst5))+((gconst1*gconst28*gconst32*gconst5))+(((-1.0)*gconst2*gconst25*gconst31*gconst8))+((gconst15*gconst19*gconst2*gconst29))+(((-1.0)*gconst2*gconst3*gconst30*gconst31))+((gconst16*gconst18*gconst22*gconst9))+(((-36.0)*gconst15*gconst24*gconst9*r02))+(((-1.0)*gconst18*gconst19*gconst2*gconst25))+(((-36.0)*gconst20*gconst27*gconst6*r02))+(((-1.0)*gconst2*gconst28*gconst32*gconst4))+(((-1.0)*gconst12*gconst16*gconst33*gconst6))+(((-1.0)*gconst13*gconst14*gconst18*gconst19))+((gconst10*gconst23*gconst27*gconst6))+(((-1.0)*gconst0*gconst28*gconst33*gconst5))+((gconst14*gconst21*gconst24*gconst6))+(((-1.0)*gconst12*gconst21*gconst27*gconst6))+((gconst17*gconst21*gconst24*gconst3))+(((-1.0)*gconst24*gconst32*gconst4*gconst6))+((gconst1*gconst10*gconst27*gconst28))+((gconst10*gconst16*gconst17*gconst23))+((gconst12*gconst16*gconst31*gconst8))+(((-1.0)*gconst10*gconst13*gconst15*gconst28))+((gconst13*gconst21*gconst28*gconst3))+((gconst24*gconst29*gconst4*gconst9))+((gconst0*gconst27*gconst31*gconst8))+((gconst16*gconst19*gconst22*gconst8))+(((-1.0)*gconst11*gconst16*gconst17*gconst22))+(((-36.0)*gconst10*gconst17*gconst27*r02))+((gconst11*gconst24*gconst28*gconst3))+((gconst11*gconst24*gconst25*gconst6))+(((-1.0)*gconst13*gconst14*gconst30*gconst9))+(((-36.0)*gconst15*gconst2*gconst31*r02))+((gconst15*gconst19*gconst24*gconst7))+(((-1.0)*gconst1*gconst27*gconst31*gconst7))+(((-36.0)*gconst20*gconst28*gconst5*r02))+(((-1.0)*gconst10*gconst24*gconst28*gconst4))+(((-1.0)*gconst11*gconst22*gconst28*gconst5))+(((-1.0)*gconst2*gconst26*gconst32*gconst6))+(((36.0)*gconst1*gconst16*gconst31*r02))+(((-1.0)*gconst15*gconst17*gconst2*gconst32))+(((-1.0)*gconst11*gconst12*gconst16*gconst28))+((gconst13*gconst14*gconst33*gconst6))+(((-36.0)*gconst13*gconst31*gconst4*r02))+(((-1.0)*gconst14*gconst19*gconst24*gconst8))+((gconst12*gconst18*gconst27*gconst9))+((gconst2*gconst29*gconst31*gconst4))+((gconst24*gconst26*gconst7*gconst9))+((gconst17*gconst20*gconst23*gconst5))+(((-1.0)*gconst10*gconst2*gconst26*gconst28))+(((-1.0)*gconst17*gconst20*gconst24*gconst4))+(((-1.0)*gconst10*gconst15*gconst17*gconst24))+(((-1.0)*gconst22*gconst33*gconst5*gconst6))+((gconst11*gconst13*gconst17*gconst25))+(((-1.0)*gconst23*gconst31*gconst5*gconst7))+(((-1.0)*gconst2*gconst25*gconst30*gconst9))+(((-1.0)*gconst1*gconst29*gconst31*gconst5))+(((-1.0)*gconst17*gconst21*gconst22*gconst5))+(((-36.0)*gconst19*gconst2*gconst26*r02))+(((-1.0)*gconst23*gconst29*gconst5*gconst9))+((gconst1*gconst17*gconst20*gconst27))+((gconst12*gconst16*gconst30*gconst9))+(((-1.0)*gconst0*gconst16*gconst17*gconst33))+(((-1.0)*gconst0*gconst17*gconst21*gconst27))+(((-1.0)*gconst13*gconst18*gconst25*gconst9))+((gconst17*gconst2*gconst21*gconst25))+(((-1.0)*gconst15*gconst2*gconst20*gconst28))+(((-1.0)*gconst14*gconst18*gconst24*gconst9))+(((-36.0)*gconst16*gconst17*gconst20*r02))+((gconst12*gconst16*gconst18*gconst19))+((gconst11*gconst13*gconst14*gconst28))+(((-36.0)*gconst19*gconst24*gconst4*r02))+(((-1.0)*gconst10*gconst24*gconst26*gconst6))+(((36.0)*gconst19*gconst27*gconst7*r02))+(((-1.0)*gconst24*gconst3*gconst30*gconst9))+((gconst0*gconst16*gconst19*gconst30))+((gconst24*gconst31*gconst4*gconst7))+((gconst2*gconst26*gconst31*gconst7))+(((-1.0)*gconst13*gconst19*gconst3*gconst30))+(((-1.0)*gconst13*gconst20*gconst26*gconst6))+((gconst14*gconst17*gconst2*gconst33))+(((-1.0)*gconst11*gconst12*gconst17*gconst27))+((gconst12*gconst19*gconst30*gconst5))+(((-1.0)*gconst16*gconst21*gconst22*gconst6))+(((-1.0)*gconst14*gconst18*gconst2*gconst31))+((gconst1*gconst16*gconst17*gconst32))+((gconst2*gconst25*gconst33*gconst6))+(((-1.0)*gconst13*gconst20*gconst28*gconst4))+(((-1.0)*gconst13*gconst14*gconst31*gconst8))+((gconst11*gconst2*gconst25*gconst28))+(((-1.0)*gconst13*gconst19*gconst25*gconst8))+((gconst23*gconst32*gconst5*gconst6))+(((-1.0)*gconst0*gconst16*gconst21*gconst28)));
op[5]=((((-36.0)*gconst13*gconst19*gconst4*r02))+(((-36.0)*gconst10*gconst27*gconst6*r02))+((gconst12*gconst18*gconst19*gconst5))+(((-1.0)*gconst13*gconst15*gconst20*gconst6))+(((-1.0)*gconst13*gconst3*gconst30*gconst9))+(((-1.0)*gconst11*gconst12*gconst27*gconst6))+(((-1.0)*gconst1*gconst16*gconst29*gconst9))+((gconst13*gconst17*gconst21*gconst3))+((gconst13*gconst29*gconst4*gconst9))+((gconst0*gconst18*gconst27*gconst9))+(((-1.0)*gconst19*gconst24*gconst3*gconst8))+((gconst21*gconst24*gconst3*gconst6))+((gconst15*gconst24*gconst7*gconst9))+((gconst11*gconst17*gconst24*gconst3))+(((-1.0)*gconst1*gconst19*gconst29*gconst5))+((gconst14*gconst17*gconst2*gconst21))+(((-1.0)*gconst20*gconst24*gconst4*gconst6))+(((-36.0)*gconst15*gconst19*gconst2*r02))+(((-1.0)*gconst10*gconst13*gconst26*gconst6))+((gconst1*gconst10*gconst17*gconst27))+((gconst20*gconst23*gconst5*gconst6))+((gconst2*gconst21*gconst28*gconst3))+((gconst12*gconst27*gconst8*gconst9))+(((-1.0)*gconst19*gconst2*gconst3*gconst30))+(((-1.0)*gconst18*gconst2*gconst25*gconst9))+((gconst11*gconst17*gconst2*gconst25))+((gconst13*gconst15*gconst19*gconst7))+(((-1.0)*gconst0*gconst17*gconst33*gconst5))+((gconst15*gconst2*gconst31*gconst7))+(((-1.0)*gconst13*gconst18*gconst19*gconst3))+((gconst11*gconst14*gconst2*gconst28))+((gconst0*gconst16*gconst18*gconst19))+(((-1.0)*gconst13*gconst14*gconst18*gconst9))+((gconst10*gconst16*gconst23*gconst6))+(((-1.0)*gconst0*gconst21*gconst27*gconst6))+(((-36.0)*gconst24*gconst4*gconst9*r02))+(((-1.0)*gconst13*gconst14*gconst19*gconst8))+(((-1.0)*gconst10*gconst15*gconst24*gconst6))+(((-1.0)*gconst18*gconst24*gconst3*gconst9))+(((-1.0)*gconst0*gconst16*gconst33*gconst6))+((gconst12*gconst30*gconst5*gconst9))+((gconst1*gconst10*gconst16*gconst28))+(((-1.0)*gconst0*gconst21*gconst28*gconst5))+(((36.0)*gconst1*gconst31*gconst5*r02))+(((-1.0)*gconst12*gconst33*gconst5*gconst6))+((gconst1*gconst16*gconst32*gconst6))+(((-1.0)*gconst0*gconst11*gconst17*gconst27))+(((-1.0)*gconst19*gconst23*gconst5*gconst7))+(((-1.0)*gconst11*gconst17*gconst22*gconst5))+((gconst1*gconst20*gconst28*gconst5))+((gconst12*gconst16*gconst19*gconst8))+(((-1296.0)*gconst19*gconst5*(r02*r02)))+(((36.0)*gconst29*gconst5*gconst9*r02))+(((-1.0)*gconst10*gconst15*gconst2*gconst28))+(((-1.0)*gconst1*gconst19*gconst27*gconst7))+((gconst11*gconst13*gconst28*gconst3))+(((-1.0)*gconst10*gconst13*gconst28*gconst4))+(((-36.0)*gconst32*gconst5*gconst6*r02))+(((-1.0)*gconst10*gconst13*gconst15*gconst17))+(((-1.0)*gconst13*gconst17*gconst20*gconst4))+(((-1.0)*gconst0*gconst11*gconst16*gconst28))+((gconst0*gconst19*gconst30*gconst5))+(((-1.0)*gconst21*gconst22*gconst5*gconst6))+(((-1.0)*gconst12*gconst17*gconst21*gconst5))+(((-1.0)*gconst13*gconst25*gconst8*gconst9))+((gconst12*gconst31*gconst5*gconst8))+((gconst10*gconst17*gconst23*gconst5))+((gconst12*gconst16*gconst18*gconst9))+(((-1.0)*gconst12*gconst16*gconst21*gconst6))+((gconst14*gconst2*gconst33*gconst6))+(((-1.0)*gconst15*gconst2*gconst32*gconst6))+(((-1.0)*gconst16*gconst23*gconst7*gconst9))+((gconst1*gconst20*gconst27*gconst6))+(((-36.0)*gconst17*gconst20*gconst5*r02))+((gconst13*gconst31*gconst4*gconst7))+((gconst0*gconst18*gconst31*gconst5))+(((-36.0)*gconst10*gconst16*gconst17*r02))+(((-1.0)*gconst10*gconst17*gconst24*gconst4))+(((-36.0)*gconst16*gconst20*gconst6*r02))+(((-1.0)*gconst11*gconst12*gconst28*gconst5))+(((-36.0)*gconst2*gconst31*gconst4*r02))+(((-1.0)*gconst17*gconst2*gconst32*gconst4))+((gconst11*gconst13*gconst25*gconst6))+(((36.0)*gconst1*gconst16*gconst19*r02))+((gconst0*gconst16*gconst31*gconst8))+((gconst17*gconst2*gconst3*gconst33))+(((-1.0)*gconst11*gconst12*gconst16*gconst17))+(((36.0)*gconst27*gconst7*gconst9*r02))+((gconst15*gconst2*gconst29*gconst9))+((gconst0*gconst19*gconst27*gconst8))+(((-1.0)*gconst11*gconst16*gconst22*gconst6))+((gconst13*gconst3*gconst33*gconst6))+((gconst16*gconst22*gconst8*gconst9))+((gconst1*gconst16*gconst17*gconst20))+(((-1.0)*gconst14*gconst2*gconst30*gconst9))+((gconst0*gconst16*gconst30*gconst9))+((gconst19*gconst2*gconst26*gconst7))+((gconst11*gconst14*gconst24*gconst6))+(((-1.0)*gconst13*gconst3*gconst31*gconst8))+(((-36.0)*gconst13*gconst15*gconst9*r02))+(((-1.0)*gconst14*gconst2*gconst31*gconst8))+(((-1.0)*gconst15*gconst17*gconst2*gconst20))+((gconst11*gconst13*gconst14*gconst17))+((gconst19*gconst24*gconst4*gconst7))+(((-1.0)*gconst19*gconst2*gconst25*gconst8))+(((-1.0)*gconst1*gconst16*gconst31*gconst7))+(((36.0)*gconst16*gconst19*gconst7*r02))+((gconst13*gconst14*gconst21*gconst6))+(((-36.0)*gconst10*gconst28*gconst5*r02))+(((-1.0)*gconst13*gconst32*gconst4*gconst6))+((gconst19*gconst22*gconst5*gconst8))+(((36.0)*gconst31*gconst5*gconst7*r02))+(((-36.0)*gconst2*gconst26*gconst9*r02))+(((-1.0)*gconst14*gconst24*gconst8*gconst9))+(((-1296.0)*gconst16*gconst9*(r02*r02)))+((gconst18*gconst22*gconst5*gconst9))+(((36.0)*gconst23*gconst5*gconst9*r02))+((gconst13*gconst26*gconst7*gconst9))+(((-1.0)*gconst10*gconst17*gconst2*gconst26))+(((-1.0)*gconst2*gconst20*gconst26*gconst6))+(((-1.0)*gconst14*gconst18*gconst19*gconst2))+(((-1.0)*gconst2*gconst20*gconst28*gconst4))+(((-1.0)*gconst18*gconst2*gconst3*gconst31))+(((36.0)*gconst1*gconst27*gconst9*r02))+((gconst2*gconst21*gconst25*gconst6))+((gconst19*gconst2*gconst29*gconst4))+((gconst1*gconst17*gconst32*gconst5))+(((-1.0)*gconst0*gconst16*gconst17*gconst21)));
op[6]=(((gconst0*gconst16*gconst19*gconst8))+(((-36.0)*gconst10*gconst17*gconst5*r02))+(((-1.0)*gconst0*gconst17*gconst21*gconst5))+(((-1.0)*gconst18*gconst19*gconst2*gconst3))+(((-1.0)*gconst23*gconst5*gconst7*gconst9))+(((-1.0)*gconst10*gconst13*gconst15*gconst6))+(((-1.0)*gconst1*gconst16*gconst19*gconst7))+(((-1.0)*gconst11*gconst12*gconst17*gconst5))+(((-36.0)*gconst19*gconst2*gconst4*r02))+(((-1.0)*gconst24*gconst3*gconst8*gconst9))+(((-1.0)*gconst14*gconst19*gconst2*gconst8))+((gconst11*gconst14*gconst17*gconst2))+((gconst13*gconst15*gconst7*gconst9))+((gconst12*gconst18*gconst5*gconst9))+(((-36.0)*gconst10*gconst16*gconst6*r02))+(((-1.0)*gconst13*gconst20*gconst4*gconst6))+((gconst0*gconst16*gconst18*gconst9))+((gconst15*gconst19*gconst2*gconst7))+(((-36.0)*gconst13*gconst4*gconst9*r02))+((gconst0*gconst18*gconst19*gconst5))+((gconst11*gconst24*gconst3*gconst6))+((gconst1*gconst32*gconst5*gconst6))+(((-1.0)*gconst17*gconst2*gconst20*gconst4))+(((-1.0)*gconst10*gconst24*gconst4*gconst6))+(((-1.0)*gconst1*gconst31*gconst5*gconst7))+(((-1.0)*gconst10*gconst2*gconst26*gconst6))+(((-1.0)*gconst0*gconst11*gconst27*gconst6))+((gconst12*gconst19*gconst5*gconst8))+(((36.0)*gconst1*gconst19*gconst5*r02))+(((-1.0)*gconst2*gconst32*gconst4*gconst6))+((gconst1*gconst10*gconst16*gconst17))+(((36.0)*gconst16*gconst7*gconst9*r02))+(((-36.0)*gconst15*gconst2*gconst9*r02))+((gconst11*gconst13*gconst17*gconst3))+(((-1.0)*gconst13*gconst18*gconst3*gconst9))+((gconst14*gconst2*gconst21*gconst6))+((gconst11*gconst2*gconst25*gconst6))+((gconst17*gconst2*gconst21*gconst3))+((gconst2*gconst3*gconst33*gconst6))+((gconst11*gconst13*gconst14*gconst6))+(((-1.0)*gconst0*gconst11*gconst16*gconst17))+(((-1.0)*gconst0*gconst33*gconst5*gconst6))+((gconst1*gconst10*gconst28*gconst5))+((gconst24*gconst4*gconst7*gconst9))+((gconst1*gconst17*gconst20*gconst5))+(((-1.0)*gconst14*gconst18*gconst2*gconst9))+((gconst11*gconst2*gconst28*gconst3))+(((-1.0)*gconst13*gconst19*gconst3*gconst8))+(((-1.0)*gconst15*gconst2*gconst20*gconst6))+((gconst0*gconst31*gconst5*gconst8))+(((-1.0)*gconst2*gconst3*gconst31*gconst8))+((gconst1*gconst16*gconst20*gconst6))+(((-1.0)*gconst0*gconst11*gconst28*gconst5))+(((-1.0)*gconst1*gconst29*gconst5*gconst9))+(((-1.0)*gconst13*gconst14*gconst8*gconst9))+(((-1.0)*gconst1*gconst27*gconst7*gconst9))+(((-1.0)*gconst11*gconst22*gconst5*gconst6))+((gconst13*gconst19*gconst4*gconst7))+(((-1.0)*gconst10*gconst15*gconst17*gconst2))+((gconst0*gconst27*gconst8*gconst9))+((gconst12*gconst16*gconst8*gconst9))+((gconst13*gconst21*gconst3*gconst6))+((gconst1*gconst10*gconst27*gconst6))+(((-1.0)*gconst2*gconst3*gconst30*gconst9))+(((-1.0)*gconst0*gconst16*gconst21*gconst6))+((gconst0*gconst30*gconst5*gconst9))+(((-36.0)*gconst20*gconst5*gconst6*r02))+(((-1296.0)*gconst5*gconst9*(r02*r02)))+((gconst10*gconst23*gconst5*gconst6))+(((-1.0)*gconst2*gconst25*gconst8*gconst9))+((gconst22*gconst5*gconst8*gconst9))+(((-1.0)*gconst10*gconst2*gconst28*gconst4))+(((-1.0)*gconst10*gconst13*gconst17*gconst4))+(((36.0)*gconst1*gconst16*gconst9*r02))+(((-1.0)*gconst11*gconst12*gconst16*gconst6))+((gconst2*gconst26*gconst7*gconst9))+((gconst2*gconst29*gconst4*gconst9))+((gconst2*gconst31*gconst4*gconst7))+(((36.0)*gconst19*gconst5*gconst7*r02))+(((-1.0)*gconst12*gconst21*gconst5*gconst6)));
op[7]=((((-1.0)*gconst11*x118*x125))+((gconst18*gconst9*x118))+(((-1.0)*x113*x137))+((x106*x107))+((x106*x116))+(((-1.0)*x115*x136))+((gconst21*x134))+((gconst9*x103*x106))+((gconst5*x103*x114))+(((-1.0)*gconst21*gconst6*x118))+((gconst15*gconst9*x99))+((x113*x114))+((gconst14*gconst6*x110))+((gconst11*gconst13*gconst3*gconst6))+(((-1.0)*gconst15*gconst2*x137))+(((-1.0)*x116*x117))+(((-1.0)*gconst13*x112*x123))+(((-1.0)*gconst19*gconst7*x106))+((x130*x132))+((x109*x123))+(((-1.0)*x107*x117))+((x115*x123))+(((-1.0)*gconst4*x103*x104))+(((-1.0)*gconst14*gconst8*x104))+(((-1.0)*x109*x136))+(((-1.0)*gconst5*x103*x130))+((x118*x121))+(((-1.0)*gconst18*x104*x112))+((gconst17*gconst3*x110))+((gconst19*gconst4*x99))+(((-1.0)*x114*x132))+(((-1.0)*gconst2*x112*x121)));
op[8]=((((-1.0)*x117*x137))+((x106*x130))+(((-1.0)*x106*x114))+(((-1.0)*gconst8*x104*x112))+((gconst4*gconst9*x99))+((gconst3*gconst6*x110))+((x118*x123))+(((-1.0)*x118*x136)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=((((-50.0)*cj0*px))+(((-50.0)*py*sj0)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x138=((11.1111111111111)*sj0);
IkReal x139=((1.11111111111111)*cj1);
IkReal x140=(cj0*r01);
IkReal x141=((1.11111111111111)*sj1);
IkReal x142=(r00*sj0);
IkReal x143=((11.1111111111111)*py);
IkReal x144=((11.1111111111111)*pz);
if( IKabs(((((-1.0)*x140*x144))+(((0.111111111111111)*r02))+(((-1.0)*x139*x142))+((cj0*r02*x143))+(((-1.0)*px*r02*x138))+((r02*x141))+((pz*r00*x138))+((x139*x140))+(((-0.222222222222222)*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.88888888888889)+(((0.333333333333333)*cj0*r00))+((x140*x141))+(((11.1111111111111)*px*r00))+((r01*x143))+(((-1.0)*r02*x139))+(((-0.111111111111111)*x142))+(((-1.0)*x141*x142))+((r02*x144))+(((0.333333333333333)*r01*sj0))+(((0.111111111111111)*x140)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x140*x144))+(((0.111111111111111)*r02))+(((-1.0)*x139*x142))+((cj0*r02*x143))+(((-1.0)*px*r02*x138))+((r02*x141))+((pz*r00*x138))+((x139*x140))+(((-0.222222222222222)*sj4))))+IKsqr(((-1.88888888888889)+(((0.333333333333333)*cj0*r00))+((x140*x141))+(((11.1111111111111)*px*r00))+((r01*x143))+(((-1.0)*r02*x139))+(((-0.111111111111111)*x142))+(((-1.0)*x141*x142))+((r02*x144))+(((0.333333333333333)*r01*sj0))+(((0.111111111111111)*x140))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*x140*x144))+(((0.111111111111111)*r02))+(((-1.0)*x139*x142))+((cj0*r02*x143))+(((-1.0)*px*r02*x138))+((r02*x141))+((pz*r00*x138))+((x139*x140))+(((-0.222222222222222)*sj4))), ((-1.88888888888889)+(((0.333333333333333)*cj0*r00))+((x140*x141))+(((11.1111111111111)*px*r00))+((r01*x143))+(((-1.0)*r02*x139))+(((-0.111111111111111)*x142))+(((-1.0)*x141*x142))+((r02*x144))+(((0.333333333333333)*r01*sj0))+(((0.111111111111111)*x140))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x145=IKcos(j3);
IkReal x146=IKsin(j3);
IkReal x147=px*px;
IkReal x148=py*py;
IkReal x149=pz*pz;
IkReal x150=(cj0*r00);
IkReal x151=(r01*sj1);
IkReal x152=(cj0*px);
IkReal x153=(r00*sj0);
IkReal x154=((0.2)*py);
IkReal x155=(cj1*r02);
IkReal x156=(cj0*r01);
IkReal x157=((0.1)*cj1);
IkReal x158=(px*r00);
IkReal x159=(pz*r02);
IkReal x160=((0.06)*py);
IkReal x161=((2.0)*py);
IkReal x162=((0.02)*py);
IkReal x163=((0.002)*sj1);
IkReal x164=(r01*sj0);
IkReal x165=((0.02)*px);
IkReal x166=(px*sj0);
IkReal x167=((0.1)*sj1);
IkReal x168=((1.0)*x148);
IkReal x169=((0.2)*cj1*pz);
IkReal x170=((1.0)*x147);
IkReal x171=((1.0)*x149);
evalcond[0]=((((0.01)*r02))+(((-1.0)*x153*x157))+(((-0.02)*sj4))+(((-1.0)*r02*x166))+((cj0*py*r02))+(((-0.09)*x146))+(((-1.0)*pz*x156))+((x156*x157))+((r02*x167))+((pz*x153)));
evalcond[1]=((0.17)+(((0.09)*x145))+(((-0.01)*x156))+(((-0.03)*x150))+(((-0.03)*x164))+(((0.1)*x155))+(((-1.0)*x159))+(((-1.0)*x158))+(((0.01)*x153))+(((-1.0)*py*r01))+(((-0.1)*cj0*x151))+((x153*x167)));
evalcond[2]=((0.0273)+(((0.0036)*sj4*x146))+((sj0*x165))+(((-1.0)*x168))+(((-1.0)*x163))+(((-1.0)*cj0*x162))+(((-1.0)*x170))+(((-1.0)*x171))+(((-0.06)*x152))+x169+(((-1.0)*cj0*sj1*x154))+(((0.2)*sj1*x166))+(((0.0306)*x145))+(((-0.0012)*cj4))+(((-1.0)*sj0*x160)));
evalcond[3]=((-0.0102)+(((-0.0092)*x164))+((r01*x152*x161))+((r01*x165))+((r01*x160))+(((-0.0092)*x150))+(((-0.006)*sj1*x153))+(((0.2)*px*x151))+(((-1.0)*sj0*x154*x155))+(((0.0036)*cj4*x145))+(((-1.0)*r00*x162))+(((-0.0054)*x145))+((x150*x169))+(((0.06)*x159))+(((0.06)*x158))+(((0.0068)*cj4))+(((-1.0)*x150*x163))+(((-1.0)*x150*x168))+(((-1.0)*x150*x171))+(((-0.006)*x155))+(((-0.002)*sj0*x151))+((x148*x164))+((x164*x169))+(((-0.0006)*x153))+((x147*x150))+(((-0.2)*x152*x155))+((sj0*x159*x161))+(((2.0)*x152*x159))+((px*x153*x161))+(((-1.0)*x164*x170))+(((-1.0)*x164*x171))+(((0.006)*cj0*x151))+(((0.0006)*x156))+(((-1.0)*r00*sj1*x154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x172=(sj1*sj3);
IkReal x173=(r00*sj0);
IkReal x174=(cj0*r01);
IkReal x175=(cj1*cj3);
IkReal x176=(cj1*sj3);
IkReal x177=((1.0)*r02);
IkReal x178=(cj3*sj1);
if( IKabs((((x172*x174))+((x173*x175))+(((-1.0)*x177*x178))+(((-1.0)*x174*x175))+(((-1.0)*x176*x177))+(((-1.0)*x172*x173)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x173*x176))+((x173*x178))+(((-1.0)*x174*x176))+(((-1.0)*x174*x178))+(((-1.0)*x172*x177))+((r02*x175)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x172*x174))+((x173*x175))+(((-1.0)*x177*x178))+(((-1.0)*x174*x175))+(((-1.0)*x176*x177))+(((-1.0)*x172*x173))))+IKsqr((((x173*x176))+((x173*x178))+(((-1.0)*x174*x176))+(((-1.0)*x174*x178))+(((-1.0)*x172*x177))+((r02*x175))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x172*x174))+((x173*x175))+(((-1.0)*x177*x178))+(((-1.0)*x174*x175))+(((-1.0)*x176*x177))+(((-1.0)*x172*x173))), (((x173*x176))+((x173*x178))+(((-1.0)*x174*x176))+(((-1.0)*x174*x178))+(((-1.0)*x172*x177))+((r02*x175))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x179=IKsin(j2);
IkReal x180=IKcos(j2);
IkReal x181=py*py;
IkReal x182=pz*pz;
IkReal x183=px*px;
IkReal x184=(r01*sj0);
IkReal x185=(r00*sj1);
IkReal x186=(cj0*pz);
IkReal x187=(cj1*pz);
IkReal x188=(cj1*r00);
IkReal x189=((0.02)*px);
IkReal x190=((0.01)*cj1);
IkReal x191=((0.02)*cj3);
IkReal x192=((0.03)*sj0);
IkReal x193=((0.0012)*cj4);
IkReal x194=(cj0*px);
IkReal x195=((0.2)*r02);
IkReal x196=((0.02)*r02);
IkReal x197=((0.06)*py);
IkReal x198=((1.0)*r01);
IkReal x199=(cj1*px);
IkReal x200=((0.01)*sj1);
IkReal x201=(r02*sj0);
IkReal x202=((2.0)*px);
IkReal x203=(cj1*r02);
IkReal x204=(cj0*r00);
IkReal x205=((0.01)*cj0);
IkReal x206=(r02*sj1);
IkReal x207=((2.0)*py);
IkReal x208=((0.02)*sj4);
IkReal x209=((0.0006)*cj0);
IkReal x210=((0.2)*r01);
IkReal x211=((0.0068)*sj4);
IkReal x212=((0.06)*r01);
IkReal x213=((0.02)*cj4);
IkReal x214=(cj0*py);
IkReal x215=((1.0)*cj1);
IkReal x216=(cj0*sj1);
IkReal x217=(pz*sj1);
IkReal x218=((0.02)*sj0);
IkReal x219=(px*sj1);
IkReal x220=((0.2)*r00);
IkReal x221=(cj0*cj1);
IkReal x222=(sj3*x179);
IkReal x223=(sj1*x207);
IkReal x224=((1.0)*x206);
IkReal x225=(sj3*x180);
IkReal x226=(sj4*x179);
IkReal x227=(sj0*x181);
IkReal x228=(sj1*x201);
IkReal x229=(cj0*x183);
IkReal x230=(cj3*x180);
IkReal x231=(sj0*x182);
IkReal x232=(r01*x221);
IkReal x233=(cj3*x179);
IkReal x234=(sj4*x180);
IkReal x235=((0.02)*r01*sj1);
IkReal x236=((0.02)*cj1*r01);
IkReal x237=((1.0)*sj0*x183);
evalcond[0]=(((sj0*x185))+(((-1.0)*x198*x216))+x222+x203+(((-1.0)*x230)));
evalcond[1]=(((sj0*x188))+(((-1.0)*x198*x221))+(((-1.0)*x233))+(((-1.0)*x224))+(((-1.0)*x225)));
evalcond[2]=((-0.1)+(((-1.0)*sj1*x214))+(((-0.09)*x180))+(((-1.0)*x191*x226))+(((-0.17)*x230))+(((0.17)*x222))+x187+(((-1.0)*x208*x225))+(((-1.0)*x200))+((sj0*x219)));
evalcond[3]=((((-0.09)*x179))+(((-0.17)*x233))+((sj0*x199))+(((-1.0)*x190))+((x191*x234))+(((-1.0)*x208*x222))+(((-1.0)*x217))+(((-0.17)*x225))+(((-1.0)*x214*x215)));
evalcond[4]=(((x184*x217))+(((-0.03)*x225))+(((-0.03)*x232))+(((-0.03)*x233))+(((-0.03)*x206))+(((-1.0)*x194*x224))+((x188*x192))+((x185*x186))+((x184*x190))+((x213*x225))+((x188*x205))+(((-1.0)*py*x228))+(((-1.0)*x198*x199))+((cj4*x179*x191))+((py*x188)));
evalcond[5]=(((x186*x188))+(((-0.1)*x204))+(((-0.03)*x222))+(((-1.0)*x184*x200))+(((-0.03)*x203))+(((0.03)*x230))+(((-1.0)*cj4*x180*x191))+(((-1.0)*py*x201*x215))+(((-1.0)*x185*x205))+((x213*x222))+((x184*x187))+(((-1.0)*py*x185))+(((-1.0)*x194*x203))+(((-1.0)*x185*x192))+(((0.03)*r01*x216))+((r01*x219))+(((-0.1)*x184)));
evalcond[6]=(((x186*x235))+(((0.0195)*x225))+((x189*x228))+((px*sj0*x195))+(((0.06)*x184*x217))+((x188*x227))+((x187*x196))+((r01*x207*x217))+(((-1.0)*pz*x185*x218))+((x188*x197))+(((-1.0)*sj1*x196*x214))+((x188*x231))+((x193*x225))+((x188*x189))+((x188*x209))+(((-1.0)*x183*x198*x221))+(((-1.0)*x183*x224))+(((-1.0)*x181*x224))+(((-1.0)*x211*x230))+((py*x236))+(((-0.002)*r02))+((x188*x194*x207))+((x186*x203*x207))+(((-0.0036)*x234))+((x186*x210))+(((0.0357)*x233))+(((0.0006)*cj1*x184))+(((-0.011)*x206))+((pz*x185*x202))+(((-0.06)*x194*x206))+(((-1.0)*pz*sj0*x220))+(((0.0306)*x179))+(((-1.0)*x195*x214))+((x181*x232))+(((0.06)*x185*x186))+(((0.0108)*sj0*x188))+(((-1.0)*x182*x198*x221))+((x182*x206))+(((-0.0108)*x232))+(((-1.0)*x199*x212))+(((-1.0)*x187*x201*x202))+((x193*x233))+(((-1.0)*x184*x199*x207))+(((-1.0)*x188*x237))+(((-1.0)*x197*x228))+((x211*x222)));
evalcond[7]=(((x211*x233))+((x185*x227))+(((-1.0)*r01*x187*x207))+((py*x210))+(((0.006)*x184))+(((0.002)*cj0*r01))+(((-1.0)*x186*x236))+(((-1.0)*x182*x203))+((cj1*x196*x214))+(((-0.0092)*sj0*x185))+(((-1.0)*x182*x198*x216))+(((-1.0)*x185*x237))+(((0.06)*x194*x203))+(((-1.0)*x183*x198*x216))+(((-1.0)*x201*x202*x217))+(((-0.002)*r00*sj0))+((x185*x209))+((x185*x189))+((x186*x206*x207))+(((-1.0)*cj1*x189*x201))+(((-0.06)*x186*x188))+(((-0.0195)*x222))+(((0.0006)*sj1*x184))+((x185*x197))+((x185*x194*x207))+((x185*x231))+(((0.0092)*r01*x216))+(((-1.0)*x193*x222))+((cj1*x197*x201))+((x196*x217))+((px*x220))+(((-0.06)*x184*x187))+((py*x235))+(((-0.009)*x203))+(((-1.0)*r00*x187*x202))+(((0.0357)*x230))+(((0.0036)*x226))+(((0.006)*x204))+((x183*x203))+(((-1.0)*py*sj1*x184*x202))+(((-1.0)*x212*x219))+((r00*x187*x218))+(((0.0306)*x180))+((x181*x203))+((r01*x181*x216))+((x193*x230))+((x211*x225))+((pz*x195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - learm (cbea643b86d6955826b6b3e421bca80b)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
